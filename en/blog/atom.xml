<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chaosblade.io/en/blog</id>
    <title>ChaosBlade Blog</title>
    <updated>2022-09-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chaosblade.io/en/blog"/>
    <subtitle>ChaosBlade Blog</subtitle>
    <icon>https://chaosblade.io/en/img/favicon/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[ChaosBlade Java 场景性能优化，那些你不知道的事]]></title>
        <id>/2022/09/09/chaosblade-java</id>
        <link href="https://chaosblade.io/en/blog/2022/09/09/chaosblade-java"/>
        <updated>2022-09-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么chaosblade java场景性能优化的实现。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://chaosblade.io/" target="_blank" rel="noopener noreferrer">ChaosBlade</a> 是阿里巴巴开源的一款遵循混沌工程原理和混沌实验模型的实验注入工具，帮助企业提升分布式系统的容错能力，并且在企业上云或往云原生系统迁移过程中业务连续性保障。</p><p>目前支持的场景有：基础资源、Java 应用、C++ 应用、Docker 容器以及 Kubernetes 平台。该项目将场景按领域实现封装成单独的项目，不仅可以使领域内场景标准化实现，而且非常方便场景水平和垂直扩展，通过遵循混沌实验模型，实现 ChaosBlade cli 统一调用。</p><p>不过Java场景下的故障注入目前有一些性能问题,主要体现在故障注入时会让CPU的使用率大幅度抖动,严重情况下可能会导致CPU的使用率100%。这种情况对于线下服务的影响还好，但是对于线上服务就比较严重了，因为CPU的使用率较高有可能会导致服务的整体性能变差，从而影响接口的耗时。</p><p><strong>通过对ChaosBlade Java 场景的性能优化，使CPU在故障注入时的抖动得到了有效的控制，不会再出现CPU使用率达到100%的抖动，经过测试在线上8C，4G，QPS 3K左右的服务实例上注入Dubbo 自定义抛异常的故障，CPU的使用率可以控制在40%左右的瞬时抖动范围内,性能整体提升近2.5倍。</strong></p><p>本文将会详细的介绍影响性能的问题点以及是如何对这些问题进行优化的。</p><h1>2.Java场景</h1><p>在介绍前先了解下ChaosBlade Java场景的注入流程。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014005578-270f85a6-fd83-4e0a-b43b-dc97eb26f510.png#clientId=u52ad7d43-5028-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=232&amp;id=u536ca7fe&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=464&amp;originWidth=1598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107988&amp;status=done&amp;style=none&amp;taskId=u5f0cd5e6-7193-4e6e-8b83-392a6b276dc&amp;title=&amp;width=799" alt="image.png" class="img_ev3q">Java场景的故障注入是基于字节码增强框架JVM-Sandbox实现的，注入一个故障分为两步：</p><ol><li>ChaosBlade 执行prepare命令，触发sandbox对目标JVM挂载 Java agent。</li><li>ChaosBlade 执行create命令，触发sandbox对目标JVM进行字节码增强，从而达到故障注入的目的。</li></ol><h1>3.prepare(挂载)阶段优化</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="31-现象">3.1 现象<a class="hash-link" href="#31-现象" title="Direct link to heading">​</a></h2><p>本地模拟一个简单的HTTP服务，控制其CPU Idle在50%左右，当执行blade prepare jvm --pid挂载agent后，发现CPU空闲率迅速下降，并且下降的幅度较大。在生产中进行故障注入有可能会直接让Idle掉低从而触发告警</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014042664-6aa32560-c4ad-4cf9-af1c-12bbe48d3ef6.png#clientId=u52ad7d43-5028-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=172&amp;id=u78f2e45e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=274&amp;originWidth=1188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=82193&amp;status=done&amp;style=none&amp;taskId=u4e1a626e-a680-4a97-899e-090dc4062f5&amp;title=&amp;width=745" alt="image.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="32-定位">3.2 定位<a class="hash-link" href="#32-定位" title="Direct link to heading">​</a></h2><p>通过采集CPU profile生成火焰图来观察在执行blade prepare时CPU的使用情况，如下图可以看到loadPlugins方法是资源消耗的重灾区</p><p><a href="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014182779-f714d227-c3c4-45ce-822b-7b68bc23e0b8.png#clientId=u52ad7d43-5028-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=325&amp;id=u24cbcf93&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=484&amp;originWidth=1074&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=354434&amp;status=done&amp;style=none&amp;taskId=u2fe4bf22-dd36-46c5-adf4-77b0adb50c6&amp;title=&amp;width=721" target="_blank" rel="noopener noreferrer">image.png</a></p><p>loadPlugins方法中主要是加载ChaosBlade Java中支持的全部插件，例如dubbo,redis,kafka等。当加载了这些插件后就可以进行故障注入了。加载插件的过程中会对插件中定义的类以及方法进行字节码增强。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014673785-ea235bde-77c7-49da-a083-df8cf33a8fee.png#clientId=u1e121cd7-cea1-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=u9a60fe1b&amp;margin=%5Bobject%20Object%5D&amp;name=attach%26%E5%8A%A0%E8%BD%BD.png&amp;originHeight=258&amp;originWidth=1532&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30862&amp;status=done&amp;style=none&amp;taskId=u69b3ea87-d7a9-4501-ab63-a88d77fea12&amp;title=" alt="attach&amp;加载.png" class="img_ev3q"></p><p>导致CPU消耗的问题就在于加载全量的插件耗时较大，而我们故障注入时会选择具体某个插件进行故障注入，显然全量加载并不是最优解</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="33-优化">3.3 优化<a class="hash-link" href="#33-优化" title="Direct link to heading">​</a></h2><p>优化思路:既然故障注入时会选择具体的插件，那么通过懒加载的方式即可解决，当我们要针对哪一个插件故障注入就加载哪个插件，加载的粒度变小，CPU的消耗自然就小了
<img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014682629-b696cbe2-83ff-42d4-bcd8-ffa3212b51c3.png#clientId=u1e121cd7-cea1-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=uf7664a78&amp;margin=%5Bobject%20Object%5D&amp;name=attach.png&amp;originHeight=250&amp;originWidth=1438&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28442&amp;status=done&amp;style=none&amp;taskId=ua75afa23-dfe9-4a58-967f-918be317eac&amp;title=" alt="attach.png" class="img_ev3q"></p><p>核心代码：
在故障注入阶段，通过指定的插件进行懒加载。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private void lazyLoadPlugin(ModelSpec modelSpec, Model model) throws ExperimentException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PluginLifecycleListener listener = ManagerFactory.getListenerManager().getPluginLifecycleListener();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (listener == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new ExperimentException("can get plugin listener");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PluginBeans pluginBeans = ManagerFactory.getPluginManager().getPlugins(modelSpec.getTarget());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (pluginBeans == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new ExperimentException("can get plugin bean");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (pluginBeans.isLoad()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    listener.add(pluginBean);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ManagerFactory.getPluginManager().setLoad(pluginBeans, modelSpec.getTarget());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>详细代码PR:<a href="https://github.com/chaosblade-io/chaosblade-exec-jvm/pull/233" target="_blank" rel="noopener noreferrer">https://github.com/ChaosBlade-io/ChaosBlade-exec-jvm/pull/233</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="34-改进后效果">3.4 改进后效果<a class="hash-link" href="#34-改进后效果" title="Direct link to heading">​</a></h2><p>CPU Idle 下降幅度降低
<img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014777027-115887c7-3f45-4920-ac86-386ea965676b.png#clientId=u1e121cd7-cea1-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=214&amp;id=u9b9f16de&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=1157&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75312&amp;status=done&amp;style=none&amp;taskId=u0d4cf015-6977-4180-af58-a7e30591c40&amp;title=&amp;width=655.5" alt="image.png" class="img_ev3q"></p><p>火焰图中的CPU使用率几乎“消失”</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014826580-a39a6aeb-1aaf-4395-9e86-a52c722a7e93.png#clientId=u1e121cd7-cea1-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=284&amp;id=u706b2e3e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=484&amp;originWidth=1146&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=413253&amp;status=done&amp;style=none&amp;taskId=ua87d9097-7a43-4975-b0b4-35889169026&amp;title=&amp;width=673" alt="image.png" class="img_ev3q"></p><h1>4.create(注入)阶段优化</h1><p>在实际使用中发现故障注入导致CPU Idle跌底的情况比较多，跌底的持续时间是比较短暂的基本都在20S左右，有一些情况是和目标服务的业务代码有关系或者是和目标服务的jvm参数设置有关，本文只介绍由ChaosBlade导致的或间接导致的CPU Idle跌底问题。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662014860747-8535e13d-dfa9-45eb-b9ca-56a51487c8a6.png#clientId=u1e121cd7-cea1-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=203&amp;id=uec06453d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=335&amp;originWidth=1188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66082&amp;status=done&amp;style=none&amp;taskId=u80bd32f1-7e4c-4bc7-821a-6d0063e4e10&amp;title=&amp;width=719" alt="image.png" class="img_ev3q"></p><blockquote><p>CPU Idle跌底:这里指的是CPU 空闲率降低为0，同时意味着CPU 使用率达到了100%</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="41-dubbo故障优化">4.1 dubbo故障优化<a class="hash-link" href="#41-dubbo故障优化" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="411-问题描述">4.1.1 问题描述<a class="hash-link" href="#411-问题描述" title="Direct link to heading">​</a></h3><p>ChaosBlade中支持对dubbo provider或者consumer进行故障注入（例如抛异常），当一个服务既是provider又是consumer的时候，如果对provider故障注入则会触发bug，有可能会导致CPU Idle跌底。</p><p><strong>正常情况：</strong>一个既是provider又是consumer的服务，它的请求处理流程是流量会首先进入到provider经过处理后交由业务逻辑执行，最后通过consumer将请求转发出去。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662015356816-ccd9ffd2-8b25-4299-8271-109f11f3af83.png#clientId=u2a5f2d5c-785c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=223&amp;id=ua9805d3c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=446&amp;originWidth=2062&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84435&amp;status=done&amp;style=none&amp;taskId=u363047b1-4e34-4518-ac7d-973c7beb21d&amp;title=&amp;width=1031" alt="image.png" class="img_ev3q"></p><p><strong>针对consumer故障注入：</strong>当利用ChaosBlade对consumer进行故障注入时，流量到达consumer就会抛出异常，不会将流量真正的转发出去，从而达到一个模拟故障发生的效果。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662015418084-149453ef-e51d-4ebf-ae78-ef72bd75c610.png#clientId=u2a5f2d5c-785c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=310&amp;id=u4e441628&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=620&amp;originWidth=2080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=109051&amp;status=done&amp;style=none&amp;taskId=u07dd9a40-afa8-4df7-9e7e-a34c5b07b51&amp;title=&amp;width=1040" alt="image.png" class="img_ev3q"></p><p><strong>针对provider故障注入：</strong>当利用ChaosBlade对provider进行故障注入时，流量到达provider就会抛出异常，不会将流量向下转发。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662015421125-2b212d41-659f-42b7-af77-75bd47f6a427.png#clientId=u2a5f2d5c-785c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=311&amp;id=uc41e07ca&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=622&amp;originWidth=2082&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=108382&amp;status=done&amp;style=none&amp;taskId=u5ce1b3ab-81a4-45fb-8850-3fd25e6c4a8&amp;title=&amp;width=1041" alt="image.png" class="img_ev3q"></p><p><strong>上面说的都是预期效果，实际上ChaosBlade无论是对provider或者consumer进行故障注入时，都会同时provider以及consumer同时进行故障注入，这就有可能造成额外的资源浪费</strong>。</p><ol><li>字节码增强的类变的多了</li><li>例如当注入provider故障时，我们希望流量不要经过业务逻辑，因为一旦是在consumer也抛出了异常，流量返回时自然要经过业务逻辑的异常处理（例如打印error日志，重试等），这就有可能因为业务逻辑的处理问题导致CPU Idle下降。</li></ol><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662015488924-3b805ca7-7b55-4500-8225-c90e5d7285d6.png#clientId=u2a5f2d5c-785c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=306&amp;id=u4b3c3902&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=612&amp;originWidth=2108&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112277&amp;status=done&amp;style=none&amp;taskId=u8fd572bc-c7eb-4e0f-b4cc-3423c81e79a&amp;title=&amp;width=1054" alt="image.png" class="img_ev3q"></p><p><strong>问题原因:因为ChaosBlade的字节码增强逻辑是按照插件的粒度进行的，例如dubbo就属于一个插件，不过像dubbo和kafka这种既有针对provider又有针对consumer故障注入的插件就会同时对provider和consumer都注入故障了。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="412-优化">4.1.2 优化<a class="hash-link" href="#412-优化" title="Direct link to heading">​</a></h3><p>在加载插件的时候，根据具体加载的插件名按需加载，例如执行命令:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./blade create dubbo throwCustomException --provider --exception Java.lang.Exception --service org.apache.dubbo.UserProvider --methodname GetUser </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>代表实际要针对dubbo的provider注入故障，那么就只加载provider插件进行字节码增强。</p><p>修改的核心代码：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private void lazyLoadPlugin(ModelSpec modelSpec, Model model) throws ExperimentException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ...... 省略</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (PluginBean pluginBean : pluginBeans.getPluginBeans()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String flag = model.getMatcher().get(pluginBean.getName());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if ("true".equalsIgnoreCase(flag)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            listener.add(pluginBean);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        listener.add(pluginBean);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ...... 省略</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>相关pr:<a href="https://github.com/chaosblade-io/chaosblade-exec-jvm/pull/267" target="_blank" rel="noopener noreferrer">https://github.com/ChaosBlade-io/ChaosBlade-exec-jvm/pull/267</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="42-自定义脚本故障优化">4.2 自定义脚本故障优化<a class="hash-link" href="#42-自定义脚本故障优化" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="421-问题描述">4.2.1 问题描述<a class="hash-link" href="#421-问题描述" title="Direct link to heading">​</a></h3><p>在使用ChaosBlade 注入自定义脚本的故障时导致CPU Idle跌底，自定义脚本是ChaosBlade jvm故障中支持的一种方式，指的是用户可以编写任意一段Java代码，然后将这段代码注入到对应的目标类和方法上，这样的方式灵活度非常高，通过ChaosBlade的自定义脚本注入故障可以做很多事情。</p><p>ChaosBlade命令:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./blade c jvm script --classname com.example.xxx.HelloController --methodname Hello --script-content </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="422-问题排查">4.2.2 问题排查<a class="hash-link" href="#422-问题排查" title="Direct link to heading">​</a></h3><p>我们抓取了故障注入时的火焰图以及jstack日志，通过jstack打印的线程堆栈发现了一些问题。</p><ol><li>在故障注入后线程数量会突然上升</li><li>有部分线程是blocked状态</li></ol><p><strong>故障注入前:</strong></p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662024346261-4f84e22b-db13-4626-a28d-8bb0edbbed64.png#clientId=u0a32c8ae-289c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=421&amp;id=u3c6a7cd4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=716&amp;originWidth=612&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84822&amp;status=done&amp;style=none&amp;taskId=u0a4730b2-934b-4365-8cf9-509d3a08f42&amp;title=&amp;width=360" alt="image.png" class="img_ev3q"></p><p><strong>故障注入后:</strong></p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662024384319-6c65bb55-30d3-454c-9903-3259db20ada5.png#clientId=u0a32c8ae-289c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=456&amp;id=uccb4930e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=768&amp;originWidth=612&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=97382&amp;status=done&amp;style=none&amp;taskId=ube55edef-27ae-4a7b-91fa-f9c7096278c&amp;title=&amp;width=363" alt="image.png" class="img_ev3q"></p><p>BLOCKED的线程堆栈:</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stack Trace is: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Java.lang.Thread.State: RUNNABLE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.zip.ZipFile.getEntryTime(Native Method)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.zip.ZipFile.getZipEntry(ZipFile.Java:586)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.zip.ZipFile.access$900(ZipFile.Java:60)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.zip.ZipFile$ZipEntryIterator.next(ZipFile.Java:539)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- locked &lt;0x00000006c0a57670&gt; (a sun.net.www.protocol.jar.URLJarFile)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.Java:514)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.Java:495)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.jar.JarFile$JarEntryIterator.next(JarFile.Java:258)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.jar.JarFile$JarEntryIterator.nextElement(JarFile.Java:267)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.util.jar.JarFile$JarEntryIterator.nextElement(JarFile.Java:248)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.Java.JavaCodeScriptEngine$InMemoryJavaFileManager.processJar(JavaCodeScriptEngine.Java:421)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.Java.JavaCodeScriptEngine$InMemoryJavaFileManager.listUnder(JavaCodeScriptEngine.Java:401)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.Java.JavaCodeScriptEngine$InMemoryJavaFileManager.find(JavaCodeScriptEngine.Java:390)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.Java.JavaCodeScriptEngine$InMemoryJavaFileManager.list(JavaCodeScriptEngine.Java:375)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.api.ClientCodeWrapper$WrappedJavaFileManager.list(ClientCodeWrapper.Java:231)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.jvm.ClassReader.fillIn(ClassReader.Java:2796)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.jvm.ClassReader.complete(ClassReader.Java:2446)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.jvm.ClassReader.access$000(ClassReader.Java:76)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.jvm.ClassReader$1.complete(ClassReader.Java:240)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.code.Symbol.complete(Symbol.Java:574)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.comp.MemberEnter.visitTopLevel(MemberEnter.Java:507)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.tree.JCTree$JCCompilationUnit.accept(JCTree.Java:518)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.comp.MemberEnter.memberEnter(MemberEnter.Java:437)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.comp.MemberEnter.complete(MemberEnter.Java:1038)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.code.Symbol.complete(Symbol.Java:574)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.code.Symbol$ClassSymbol.complete(Symbol.Java:1037)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.comp.Enter.complete(Enter.Java:493)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.comp.Enter.main(Enter.Java:471)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.main.JavaCompiler.enterTrees(JavaCompiler.Java:982)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.main.JavaCompiler.compile(JavaCompiler.Java:857)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.main.Main.compile(Main.Java:523)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.api.JavacTaskImpl.doCall(JavacTaskImpl.Java:129)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.sun.tools.Javac.api.JavacTaskImpl.call(JavacTaskImpl.Java:138)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.Java.JavaCodeScriptEngine.compileClass(JavaCodeScriptEngine.Java:149)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.Java.JavaCodeScriptEngine.compile(JavaCodeScriptEngine.Java:113)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.base.AbstractScriptEngineService.doCompile(AbstractScriptEngineService.Java:82)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.base.AbstractScriptEngineService.compile(AbstractScriptEngineService.Java:69)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.plugin.jvm.script.model.DynamicScriptExecutor.run(DynamicScriptExecutor.Java:74)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.common.injection.Injector.inject(Injector.Java:73)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.common.aop.AfterEnhancer.afterAdvice(AfterEnhancer.Java:46)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.common.plugin.MethodEnhancer.afterAdvice(MethodEnhancer.Java:47)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.bootstrap.jvmsandbox.AfterEventListener.onEvent(AfterEventListener.Java:93)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.jvm.sandbox.core.enhance.weaver.EventListenerHandler.handleEvent(EventListenerHandler.Java:116)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.jvm.sandbox.core.enhance.weaver.EventListenerHandler.handleOnEnd(EventListenerHandler.Java:426)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.jvm.sandbox.core.enhance.weaver.EventListenerHandler.handleOnReturn(EventListenerHandler.Java:363)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过线程堆栈可以看到线程主要是在解压jar文件是阻塞了，为什么会阻塞到这里呢？</p><p>其实是在ChaosBlade 注入自定义脚本时，自定义脚本（Java代码）只是被当作一段字符串来处理，当真正的激活插件时会把这段字符串解析，然后变成Java代码让jvm进行加载编译并执行这段代码。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662024674788-83a1c267-9a95-416b-a84c-c8a8c1ffbb5a.png#clientId=u854e1a66-dc20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=u15e852b9&amp;margin=%5Bobject%20Object%5D&amp;name=%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91.png&amp;originHeight=666&amp;originWidth=1676&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=115604&amp;status=done&amp;style=none&amp;taskId=u046c9be7-044c-44ac-997a-b5d9a724362&amp;title=" alt="脚本编译.png" class="img_ev3q"></p><p><strong>问题就在这里,当故障注入时外部流量也是在源源不断的调用当前服务的。那么按照上面说的逻辑就有可能在激活插件时，因为外部流量也在不断调用，导致大量请求都来解析自定义脚本，这样的话就造成了线程被blocked，因为解析自定义脚本到正确的让jvm加载它，这个过程是相对复杂且缓慢的，而且有的地方是要保证线程安全的。</strong></p><blockquote><p>其实ChaosBlade 也做了缓存，只要自定义脚本被编译过一次，后面的请求就会直接执行这个脚本了，但这样的缓存在并发请求的场景下编译效果并不好</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="423-优化">4.2.3 优化<a class="hash-link" href="#423-优化" title="Direct link to heading">​</a></h3><p>通过上面的排查，其实应该可以想到优化手段了，那就是要让自定义脚本的加载时间提前。</p><p>ChaosBlade注入故障分为两步,第一步挂载agent时拿不到自定义脚本信息，那么就在第二步<strong>激活插件前进行加载</strong>（因为一旦插件被激活后就有流量会执行到故障注入的埋点方法从而触发脚本的编译了）</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662024727494-f322ffc3-e397-406e-8d15-370d24673b78.png#clientId=u854e1a66-dc20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=334&amp;id=ub7fddc91&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=668&amp;originWidth=1668&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=119885&amp;status=done&amp;style=none&amp;taskId=uaf619068-ab50-4976-8b63-5af78a7b60b&amp;title=&amp;width=834" alt="image.png" class="img_ev3q"></p><p><strong>这个优化思路不仅仅适用于自定义脚本故障，例如自定义抛异常故障也是可以的。</strong></p><p><strong>在自定义抛异常的故障执行中，也是当流量过来时才会根据用户输入的异常类字符进行反射加载，类的加载(classloader)底层也是需要加锁的，所以也有可能造成线程blocked.</strong></p><p>优化内容:增加故障前置执行接口，针对需要在故障注入前，执行某些动作的插件可以去实现它。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface PreActionExecutor {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Pre run executor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param enhancerModel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @throws Exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void preRun(EnhancerModel enhancerModel) throws ExperimentException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private void applyPreActionExecutorHandler(ModelSpec modelSpec, Model model)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throws ExperimentException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ActionExecutor actionExecutor = modelSpec.getActionSpec(model.getActionName()).getActionExecutor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (actionExecutor instanceof PreActionExecutor) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        EnhancerModel enhancerModel = new EnhancerModel(EnhancerModel.class.getClassLoader(), model.getMatcher());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        enhancerModel.merge(model);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ((PreActionExecutor) actionExecutor).preRun(enhancerModel);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>相关pr:<a href="https://github.com/chaosblade-io/chaosblade-exec-jvm/pull/269" target="_blank" rel="noopener noreferrer">https://github.com/ChaosBlade-io/ChaosBlade-exec-jvm/pull/269</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="43-日志打印优化">4.3 日志打印优化<a class="hash-link" href="#43-日志打印优化" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="431-问题描述">4.3.1 问题描述<a class="hash-link" href="#431-问题描述" title="Direct link to heading">​</a></h3><p>日志打印导致的CPU Idle跌底问题主要有两方面:</p><ol><li>业务系统内部自身的日志框架，例如使用log4j/logback同步日志打印，如果在注入故障后（例如抛异常）<strong>很有可能因为业务系统处理异常并打印日志导致线程大面积被blocked。</strong>因为同步日志打印是需要加锁处理，并且异常堆栈是相对内容较多的打印也相对耗时，从而当QPS较高时可能会导致大量线程被阻塞。</li></ol><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">- locked &lt;0x00000006f08422d0&gt; (a org.apache.log4j.DailyRollingFileAppender)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.Java:66)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at org.apache.log4j.Category.callAppenders(Category.Java:206)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- locked &lt;0x00000006f086daf8&gt; (a org.apache.log4j.Logger)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at org.apache.log4j.Category.forcedLog(Category.Java:391)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at org.apache.log4j.Category.log(Category.Java:856)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at org.slf4j.impl.Log4jLoggerAdapter.log(Log4jLoggerAdapter.Java:601)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662024805257-1df804ba-b2f4-4718-b85f-576efda49d21.png#clientId=u854e1a66-dc20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=307&amp;id=u7fc7ec6d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=435&amp;originWidth=612&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=115307&amp;status=done&amp;style=none&amp;taskId=u0fc9e5fd-9ce3-4d99-971d-b9c08f05cd2&amp;title=&amp;width=432" alt="image.png" class="img_ev3q"></p><ol start="2"><li>ChaosBlade 自身的日志打印,每次故障注入规则匹配成功时都会输出info日志</li></ol><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">LOGGER.info("Match rule: {}", JsonUtil.writer().writeValueAsString(model));</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在输出日志的时候都会将故障模型使用jackson序列化输出,这会触发类加载（加锁操作）当有大量请求时可能会导致大量线程阻塞。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Java.lang.Thread.State: RUNNABLE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.lang.String.charAt(String.Java:657)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.io.UnixFileSystem.normalize(UnixFileSystem.Java:87)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.io.File.&lt;init&gt;(File.Java:279)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.file.Handler.openConnection(Handler.Java:80)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- locked &lt;0x00000000c01f2740&gt; (a sun.net.www.protocol.file.Handler)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.file.Handler.openConnection(Handler.Java:72)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- locked &lt;0x00000000c01f2740&gt; (a sun.net.www.protocol.file.Handler)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.net.URL.openConnection(URL.Java:979)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.jar.JarFileFactory.getConnection(JarFileFactory.Java:65)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.jar.JarFileFactory.getPermission(JarFileFactory.Java:154)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(JarFileFactory.Java:126)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.Java:81)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- locked &lt;0x00000000c00171f0&gt; (a sun.net.www.protocol.jar.JarFileFactory)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.Java:122)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.Java:152)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.net.URL.openStream(URL.Java:1045)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.lang.ClassLoader.getResourceAsStream(ClassLoader.Java:1309)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.lang.reflect.Method.invoke(Method.Java:498)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.Java:689)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.Java:755)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.Java:178)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.Java:728)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.Java:755)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.Java:178)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.Java:480)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.Java:319)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.Java:1516)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ObjectWriter._writeValueAndClose(ObjectWriter.Java:1217)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(ObjectWriter.Java:1086)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.common.injection.Injector.inject(Injector.Java:69)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.common.aop.AfterEnhancer.afterAdvice(AfterEnhancer.Java:46)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.common.plugin.MethodEnhancer.afterAdvice(MethodEnhancer.Java:47)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.ChaosBlade.exec.bootstrap.jvmsandbox.AfterEventListener.onEvent(AfterEventListener.Java:93)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.jvm.sandbox.core.enhance.weaver.EventListenerHandler.handleEvent(EventListenerHandler.Java:116)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.jvm.sandbox.core.enhance.weaver.EventListenerHandler.handleOnEnd(EventListenerHandler.Java:426)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at com.alibaba.jvm.sandbox.core.enhance.weaver.EventListenerHandler.handleOnReturn(EventListenerHandler.Java:363)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">at Java.com.alibaba.jvm.sandbox.spy.Spy.spyMethodOnReturn(Spy.Java:192)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="432-优化">4.3.2 优化<a class="hash-link" href="#432-优化" title="Direct link to heading">​</a></h3><p>关于业务系统的日志打印引发的线程block，不在ChaosBlade优化的范围内，大家有遇到类似情况可以自行解决。</p><p>解决的思路:</p><ol><li>日志同步打印改为异步打印</li><li>ChaosBlade自定义抛异常时的错误堆栈可以尽量忽略，减少日志输出的内容。</li></ol><p>关于ChaosBlade 打印日志的优化就比较简单了，只需要将match rule序列化故障模型的部分替换掉即可。将Model实现toString，打印时直接打印Model即可。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">LOGGER.info("Match rule: {}", model);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public String toString() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return "Model{" +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "target='" + target + '\'' +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ", matchers=" + matcher.getMatchers().toString() +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ", action=" + action.getName() +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            '}';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>相关pr:<a href="https://github.com/chaosblade-io/chaosblade-exec-jvm/pull/260" target="_blank" rel="noopener noreferrer">https://github.com/ChaosBlade-io/ChaosBlade-exec-jvm/pull/260</a></p><h1>5.Metaspace OOM优化</h1><p>Metaspace 是什么，引用官方介绍</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Metaspace is a native (as in: off-heap) memory manager in the hotspot.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">It is used to manage memory for class metadata. Class metadata are allocated when classes are loaded. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Their lifetime is usually scoped to that of the loading classloader - when a loader gets collected, all class metadata it accumulated are released in bulk.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>简单来说：Metapace 是一块非堆内存，用来存储类的元数据，当加载类的时候会在 Metaspace 中分配空间存储类的元数据，当某个 ClassLoader 关闭时会对应释放掉对类元数据的引用，当触发 GC 时这部分类元数据占用的空间即可在 Metaspace 中被回收掉。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="51-现象">5.1 现象<a class="hash-link" href="#51-现象" title="Direct link to heading">​</a></h2><p><strong>日志表现</strong></p><p>在使用ChaosBlade注入无效后，登陆目标机器上观察日志，首先发现 jvm-sandbox 在 attach 目标 jvm 时失败</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025134235-ccc6d0c6-f059-4024-8b21-e6f108ef0d4e.png#clientId=u854e1a66-dc20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=146&amp;id=u252466f4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=291&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=565948&amp;status=done&amp;style=none&amp;taskId=u6ffeaa9f-3222-47f4-b5ee-9e6f0eab537&amp;title=&amp;width=960" alt="image.png" class="img_ev3q"></p><p>其次看到更关键的日志:Metaspace 溢出了！！！</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025159003-cbe3e050-32c9-4cea-8bfb-b3950170f51c.png#clientId=u854e1a66-dc20-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=343&amp;id=u74144a61&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=686&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1121123&amp;status=done&amp;style=none&amp;taskId=u9e3ca2a4-cdec-419c-ab47-d1dfa4a9426&amp;title=&amp;width=960" alt="image.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="52-定位">5.2 定位<a class="hash-link" href="#52-定位" title="Direct link to heading">​</a></h2><p>在文章开始介绍了ChaosBlade注入Java故障的流程，知道在故障注入时会将 jvm-sandbox 动态的挂载(attach)到目标进程 JVM 上,在 attach 后会加载 sandbox 内部 jar 以及 sandbox 的自定义模块 jar 等，在这个过程中会加载大量的类，当加载类时会分配 Metaspace 空间存储类的元数据。</p><p>这里有两个思考点:</p><ol><li><strong>会不会是因为业务服务 JVM 的 Metaspace 空间设置的太小？</strong></li><li><strong>Metaspace 的 GC 没有触发或者是有泄露导致类的元数据回收不掉？</strong></li></ol><p>登陆到目标机器上利用 jinfo 观察 jvm 的参数,发现 MaxMetaspaceSize 设置了 128M，这个值确实不大，因为 MaxMetaspaceSize 的默认是-1(无限制，受限于本地内存)。</p><p>让业务服务调整 MaxMetaspaceSize 参数改为 256M，然后重启 Java 进程，再次故障注入 确实没问题了，故障正常生效了。</p><p><strong>但实际问题没怎么简单，在连续注入多次后依然出现 Metaspace OOM 故障依旧无效。看来应该是故障清除时无法回收掉 Metaspace 中对应的空间。</strong></p><p><strong>本地复现</strong></p><p>由于ChaosBlade Java故障注入本质是jvm-sandbox的一个插件，类加载，字节码增强等核心逻辑都在jvm-sandebox上，所以我们直接将问题定位在jvm-sandbox上，利用jvm-sandbox提供的demo项目进行复现。</p><p>启动参数设置了 MaxMetaspaceSize=30M，因为 demo 模块类非常少，其次为了快速的复现 OOM。</p><p>TraceClassLoading 和 TraceClassUnloding 参数则是为了观察 JVM-SANDBOX 在故障注入和清除时加载/卸载类的信息。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025224907-466c59fa-2368-42ac-b8d0-310a69b2dc3f.png#clientId=u4157e217-e5f5-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=392&amp;id=ub4ebcc30&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=784&amp;originWidth=1420&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110130&amp;status=done&amp;style=none&amp;taskId=u3515020a-9a7c-4358-94e5-8d9ce0b9432&amp;title=&amp;width=710" alt="image.png" class="img_ev3q"></p><p>在多次注入以及清除的操作后，复现了线上业务出现的 Metaspace OOM，可以看到在多次注入的过程中，Metaspace 一直没有被回收过，占用空间曲线是一路上升。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025257540-54ad0e55-7bbb-4d6b-b974-254e786d8a72.png#clientId=u4157e217-e5f5-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=661&amp;id=u548266fd&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1321&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=200347&amp;status=done&amp;style=none&amp;taskId=uab1cb32a-8508-4f99-8943-d602ae934ed&amp;title=&amp;width=960" alt="image.png" class="img_ev3q"></p><p><strong>Metaspace OOM 是因为 Metaspace 没有进行过回收，Metaspace 回收的前提是 ClassLoader 关闭，而 JVM-SANDBOX 在 shutdown 时会关闭 ClassLoader。JVM-SANDBOX 中自定义的 ClassLoader 都是继承了 URLClassLoader，URLClassLoader 的关闭方法 官方介绍：</strong></p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">How to Close a URLClassLoader?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The URLClassLoader close() method effectively eliminates the problem of how to support updated implementations of the classes and resources loaded from a particular codebase, and in particular from JAR files. In principle, once the application clears all references to a loader object, the garbage collector and finalization mechanisms will eventually ensure that all resources (such as the JarFile objects) are released and closed.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>简单来说：当 classLoader 加载的所有类没有被引用时即可被关闭。</p><p><strong>猜想</strong>
<strong>当故障清除时 jvm-sandbox 中的类还有被引用的情况导致 classloader 关闭失败了。</strong></p><p><strong>验证猜想</strong>
<strong>在故障清除后，在目标服务的方法上 debug 看一下线程信息，果然在 threadLocal 中找到了两个 jvm-sandbox 的内部类（EventProcesser$Process,SandboxProtector）的引用。说明猜想是对的，问题的原因就是出现在这里了</strong></p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025409608-049339d0-4065-4e90-b6de-d27fd125b5f6.png#clientId=u90f09cf4-59dc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=662&amp;id=u56284955&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1324&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=677495&amp;status=done&amp;style=none&amp;taskId=u3ddb2694-e1f6-4055-870b-c894ab9c7a5&amp;title=&amp;width=960" alt="image.png" class="img_ev3q"></p><p>jvm-sandbox源码在这里就不带大家分析了，感兴趣的可以查看这篇<a href="https://xie.infoq.cn/article/c5be9834709f7eb48cfa683b1" target="_blank" rel="noopener noreferrer">文章</a>。主要是 jvm-sandbox 的代码实现有 bug，在以下两种情况会导致 processRef 的 ThreadLocal 没有及时 remove 造成泄漏</p><ol><li>假如在执行注入故障的过程中，进行故障清除会导致泄漏。如下：</li></ol><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025438733-39f99d72-7d45-477d-8bae-1b4fe23fa0db.png#clientId=u90f09cf4-59dc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=612&amp;id=u5597fc7a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1224&amp;originWidth=1556&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1398788&amp;status=done&amp;style=none&amp;taskId=ud0fe7ed4-f453-4fdb-b725-562334731c6&amp;title=&amp;width=778" alt="image.png" class="img_ev3q"></p><ol start="2"><li>假设使用了 jvm-sandbox 的特性-流程变更（例如立即返回，立即抛出异常），本质也是 thread local 没有及时 remove，导致造成了泄漏</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="53-优化">5.3 优化<a class="hash-link" href="#53-优化" title="Direct link to heading">​</a></h2><p>由于jvm-sandbox项目已经不在活跃了，我们将jvm-sandbox项目fork到了ChaosBlade中。
优化后的相关pr:<a href="https://github.com/chaosblade-io/jvm-sandbox/pull/1" target="_blank" rel="noopener noreferrer">https://github.com/ChaosBlade-io/jvm-sandbox/pull/1</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="54-改进后效果">5.4 改进后效果<a class="hash-link" href="#54-改进后效果" title="Direct link to heading">​</a></h2><p>启动参数还是相同的 MaxMetaspaceSize=30M，经过优化后多次注入和清除不会出现 Metaspace OOM，Metaspace可以被回收了。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025496836-b6895072-2d92-46ea-ba0f-59ab65035aff.png#clientId=u90f09cf4-59dc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=638&amp;id=u39968c09&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1275&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=143820&amp;status=done&amp;style=none&amp;taskId=ub9a9c81b-5e4b-42d7-942a-51a6015c5c6&amp;title=&amp;width=960" alt="image.png" class="img_ev3q"></p><p>卸载类的信息也打印出来了</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662025512805-62c158bc-61fc-4443-befd-b10445f9fb92.png#clientId=u90f09cf4-59dc-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=344&amp;id=u051ce70b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=687&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=344964&amp;status=done&amp;style=none&amp;taskId=uebfee1f3-f546-47a5-a96e-0725dace717&amp;title=&amp;width=960" alt="image.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="54-再次优化">5.4 再次优化<a class="hash-link" href="#54-再次优化" title="Direct link to heading">​</a></h2><p><strong>虽然我们解决了JVM-Sandbox的ThreadLocal泄漏问题，但是由于Metaspace的内存分配以及回收机制还是有可能导致OOM!!!.</strong></p><blockquote><p><strong>关于Metaspace的内存分配以及回收的相关内容可以参考</strong><a href="https://www.javadoop.com/post/metaspace" target="_blank" rel="noopener noreferrer">文章</a></p></blockquote><p>上面的优化基础上还需要在每一次故障注入前触发一次full gc，目的是让上一次jvm-sandbox占用的元空间强制释放掉。</p><p>改动点:</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static void agentmain(String featureString, Instrumentation inst) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.gc();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    LAUNCH_MODE = LAUNCH_MODE_ATTACH;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final Map&lt;String, String&gt; featureMap = toFeatureMap(featureString);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    writeAttachResult(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            getNamespace(featureMap),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            getToken(featureMap),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            install(featureMap, inst)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样的改动的虽然能解决一部分场景下的Metaspace OOM，但是也有弊端,这样会导致每一次故障注入挂载agent时都会触发一次full GC,到目前为止还没有更好的解决办法，后面可以考虑将这个full gc做成配置，通过sandbox脚本来进行开启，让用户按需选择是否要在注入前强制full gc一次。</p><p>相关pr:<a href="https://github.com/chaosblade-io/jvm-sandbox/pull/6" target="_blank" rel="noopener noreferrer">https://github.com/ChaosBlade-io/jvm-sandbox/pull/6</a></p><p>那么如何彻底解决Metaspace OOM问题呢？先说结论：不能彻底解决，因为在使用反射的情况下会自动生成一些（sun.reflect.DelegatingClassLoader），所以在业务代码中很难去关闭，那就导致DelegatingClassLoader会一直存活，从而引发Metaspace 碎片化的问题，最终导致Metaspace空间无法被正确的回收（这部分内容比较复杂，一言两语很难描述清楚）</p><a name="grkSk"></a>## 5.5 思考 关于Metaspace OOM的问题，其实优化是一方面，换个角度想也许是我们使用的方式不正确。在我们的业务场景下是会频繁的对一个服务进行故障注入&amp;卸载，每次的注入点不同。<p>如下图: 相当于每次都是重复1-4步骤，那么实际上我们并不需要这么做，因为在第一步时sandbox初始化会加载大量的类，填充metaspace。而我们每次注入只是故障点不同,agent不需要重新挂载，所以只需要重复的进行第2步和第三步即可。 在第2步和第3步中只是触发sandbox的激活和冻结事件，成本非常小。</p><p>后面我们会根据这个思路，对整个故障注入流程进行优化，相信会有更多的提升。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2022/png/215568/1662372406854-f575ffcf-01f9-4832-ae28-280d4b1848eb.png#clientId=u72ad57af-f46a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=371&amp;id=ue01bb516&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=742&amp;originWidth=1584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=185312&amp;status=done&amp;style=none&amp;taskId=ue7756adc-9d3d-40e1-a8d8-27adc8ff130&amp;title=&amp;width=792" alt="image.png" class="img_ev3q"></p><h1>6.JIT(及时编译)导致CPU抖动</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="61-问题描述">6.1 问题描述<a class="hash-link" href="#61-问题描述" title="Direct link to heading">​</a></h2><p>在Java中编译器主要分为三类：</p><ol><li>前端编译器:JDK的Javac，即把<em>.Java文件转变成</em>.class文件的过程</li><li>即时编译器:HotSpot虚拟机的C1,C2编译器,Graal编译器，JVM运行期把字节码转变成本地机器码的过程</li><li>提前编译器:JDK的Jaotc,GNU Compiler for the Java(GCJ)等</li></ol><p>在通过ChaosBlade进行故障注入后，本质是利用jvm-sandbox对目标类和放火进行了字节码增强。从而也会触发JVM的即时编译（JIT-	Just In Time）</p><p>JVM的即时编译目的是让字节码转换为机器码，从而可以更高效的执行。但是在JVM即时编译的过程中是会消耗资源的，最典型的场景就是Java的服务 在刚启动时CPU的使用率都会相对较高，一段时间后逐渐恢复平稳，出现这种现象部分情况下是因为即时编译的介入导致的。关于即时编译的内容可以参考<a href="https://xie.infoq.cn/article/dacbe19251f8ec828efacdfde" target="_blank" rel="noopener noreferrer">文章</a></p><p>对于即时编译引发的CPU使用率升高是正常现象，如果遇到JIT占用的CPU 使用率特别高，我们需要特殊关注下即时编译的参数即可。例如是否启用了分层编译，编译的线程数量等等。</p><h1>7.总结</h1><p>ChaosBlade 支持丰富的故障注入场景，尤其是在Java 生态中支持大量的插件。对于Java 场景的故障注入优势比较明显。</p><p>通过对上面介绍的问题进行优化，使用ChaosBlade进行Java场景的故障注入不会再导致CPU Idle跌底，即使在线上运行的服务进行故障注入也会将CPU的抖动控制在一个较小的波动范围。</p><p>但由于JVM JIT的问题在故障注入时CPU的瞬时抖动还是无法避免，如果大家有什么好的办法/想法也欢迎提交issue/pr来共同交流～</p><blockquote><p>ChaosBlade 官方网址：<a href="https://chaosblade.io/" target="_blank" rel="noopener noreferrer">https://chaosblade.io/</a>
ChaosBlade Github : <a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a>
ChaosBlade 钉钉社区交流群:23177705</p></blockquote>]]></content>
        <author>
            <name>张斌斌（@binbin0325）</name>
            <uri>https://github.com/binbin0325</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade-Box全新混沌工程平台 -- 助力企业混沌工程落地]]></title>
        <id>/2022/06/24/ChaosBlade-Box-a-New-Version-of-the-Chaos-Engineering-Platform-Has-Released-ch</id>
        <link href="https://chaosblade.io/en/blog/2022/06/24/ChaosBlade-Box-a-New-Version-of-the-Chaos-Engineering-Platform-Has-Released-ch"/>
        <updated>2022-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程平台新版本功能特性。]]></summary>
        <content type="html"><![CDATA[<p>在2020.11.25 AWS发生了服务大面积故障，造成了多个云产品服务受影响，不到一个月的时间内谷歌发生了那年的第三次大规模宕机，造成了波及20亿用户，损失170万美元的巨大损失。
系统架构经历了单机 到 分布式，再到现在的云原生架构，其复杂度不断上涨，问题定位的难度也随之上涨。面对随时都可能发生的故障，有没有什么的办法能很好解决这个困境。
混沌工程（Chaos Engineering）在分布式系统上进行实验的学科，通过主动注入故障的方式，提前发现系统的薄弱点，推进架构的改进，最终实现业务韧性。从而避免故障在线上运行环境上发生。
<img loading="lazy" alt="image.png" src="/en/assets/images/fault-always-56a989a61eaa3728078e7ab3ba74c657.png" width="2608" height="1398" class="img_ev3q"></p><p>这里拿云原生架构来举例说明，为什么混沌工程能解决系统架构中存在的问题。云原生架构原则和混沌工程原则是可以找到对应关系，以服务化原则说明，服务化原则其根本就是服务如何治理的问题，也就是判断上下游服务之间强弱依赖关系的问题。通过混沌工程，可以通过将请求定位到具体机器，再缩小到具体机器上的应用，不断最小化爆炸半径，通过在应用之间注入故障，判断上下游服务是否正常，来判断其强弱依赖关系。</p><p><img loading="lazy" alt="image.png" src="/en/assets/images/why-chaos-engineering-9c3388c251c4d76700477346ac1c6337.png" width="2592" height="1440" class="img_ev3q">
混沌工程的目标是实现韧性架构，这里包含两个部分：韧性系统和韧性组织。韧性系统具有冗余性、扩展性、不可变基础设施、无状态应用、避免级联故障等。韧性组织包含高效交付、故障预案、应急响应机制等。高度韧性的系统也会出现预期之外的故障，所以韧性的组织能弥补韧性系统缺失的部分，通过混沌工程构建极致的韧性架构。
<img loading="lazy" alt="image.png" src="/en/assets/images/chaos-engineering-target-be7de77e46e26d3bdfd157cf6f31f831.png" width="2614" height="1204" class="img_ev3q">
混沌工程就是通过主动注入故障的方式，提前发现系统的薄弱点，推进架构改进，最终实现业务韧性。引入混沌工程对于不同职能的人而言，其业务价值有所不同：</p><ul><li>架构师：能帮助其验证架构的容错能力</li><li>开发/运维：能提高其故障的应急效率</li><li>测试：帮助其提早暴露线上问题，降低故障复发率</li><li>产品/设计：提示客户使用体验</li></ul><p><img loading="lazy" alt="image.png" src="/en/assets/images/value-of-chaos-engineering-for-position-44409cebc966eb66cb1ab5d79932fbc0.png" width="2552" height="1424" class="img_ev3q"></p><h1>如何落地混沌工程？</h1><p>对于企业或业务如何对混沌工程进行落地？有无工具或平台能帮助其快速落地？
ChaosBlade 是一款遵循混沌实验模型的混沌实验执行工具，具有场景丰富度高，简单易用等特点，支持多平台、多语言环境，包括Linux、Kubernetes和Docker平台，支持Java、NodeJS、C++、Golang 语言应用。支持200多个场景，3000多个参数。是一款用于端侧的故障注入工具，但在业务进行落地时，会存在以下几个问题：</p><ul><li>故障注入过程如何可视化？</li><li>如何同时对多个集群或主机进行故障注入？</li><li>如何拿到整体演练的统计信息</li><li>......</li></ul><p>所以在ChaosBlade之上还需要平台层，对混沌工程执行工具进行管理与演练编排。
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblae-tool-1445030e5193be48516bb20c341c5cc5.png" width="2606" height="1442" class="img_ev3q">
ChaosBlade-Box是面向多集群、多语言、多环境，开源的云原生混沌工程控制台。
开源平台和注入工具的整体架构如下，主要包括几个组成模块：</p><ul><li>ChaosBlade-Box Console ：混沌实验用户界面</li><li>ChaosBlade-Box：Server后端服务，主要包括演练场景的编排和安全管控、混沌工程工具部署（ChaosBlade、LitmusChaos...）、支持探针管理和多维度实验</li><li>Agent：探针，主要有（ChaosBlade-Box）Server端进行建联并保持心跳、上报k8s相关数据、演练命令下发通道等功能</li><li>ChaosBlade：部署在业务的主机或k8s集群内，在端侧进行演练的工具</li></ul><p><img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-architecture-f2f939b91fe27f72f05b93378a57a291.png" width="2676" height="1492" class="img_ev3q"></p><p>新版ChaosBlade-Box平台是一个面向多集群、多环境、多语言的云原生混沌工程平台。支持国际化中英文切换，支持全局命名空间，使得同一用户可根据自己需求，设置不同的全局命名空间，如：测试空间、沙盒空间和线上空间等。提供自动化的工具部署，简化工具安装步骤，提高执行效率。平台支持不同环境的探针安装和演练，如主机和Kubernetes，其中Kubernetes环境下支持 Node、Pod、Container维度下的演练。在Kubernetes环境下会自动收集集群内的Pod相关数据，并在应用管理中进行统一管理，这样简化用户演练查询步骤，无需去集群内查看要演练应用的Pod名或Container名。并支持一键迁移到企业版，按需将社区版的演练数据同步到企业版。</p><p><img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-overview-46755b6543ba912a3cc9eca17339071c.png" width="2720" height="1474" class="img_ev3q">
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-application-manage-9d2e6ca3d4d9146a9df1dc5af2d748cc.png" width="1330" height="713" class="img_ev3q"></p><p><img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-experiment-e2b1308a0025ebb03e1a9c6f6b579a3d.png" width="1341" height="659" class="img_ev3q">
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-migrate-459e11df683706b522805c58d26dc2d0.png" width="1283" height="675" class="img_ev3q">
以下是在新版ChaosBlade-Box平台上进行一次演练的全过程，支持顺序执行、阶段执行两种流程编排，顺序执行指的是多个演练场景依次生效，阶段执行值得是多个演练场景同时生效。通过多种安全策略保证演练得到恢复，如手动处罚和自动停止，自动停止通过在演练配置的时候设置超时参数来进行配置，这样即便平台和探针（Agent）失联，无法进行手动停止时，也能在超时时间到达的时候，自动恢复故障。
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-workflow-dbbb2c3a557e6ff914a2d01dd56386fb.png" width="1320" height="689" class="img_ev3q">
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-result-dac16a602c9f1a570443bb747afb2c56.png" width="1302" height="678" class="img_ev3q"></p><h1>新版优势是什么？</h1><p>此次发布的新版相较于老版，前端界面和企业版进行统一，简化使用习惯的切换成本，更为完善的国际化中英文切换，并支持全局命名空间的切换；后端提供了更为流畅的演练编排，完善的应用管理，并加强了对探针的管控，并支持一键迁移到企业版；加强了探针的功能，提供了更加完善的API，支持多环境部署且支持在不同环境作为演练通道，支持自动安装卸载，并收集并上报数据简化演练流畅。
<img loading="lazy" alt="image.png" src="/en/assets/images/chaoblade-box-advantage-cabc04d804ee171a2c0119848691512b.png" width="1294" height="700" class="img_ev3q"></p>]]></content>
        <author>
            <name>camix</name>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade-Box, a New Version of the Chaos Engineering Platform Has Released]]></title>
        <id>/2022/06/24/ChaosBlade-Box-a-New-Version-of-the-Chaos-Engineering-Platform-Has-Released</id>
        <link href="https://chaosblade.io/en/blog/2022/06/24/ChaosBlade-Box-a-New-Version-of-the-Chaos-Engineering-Platform-Has-Released"/>
        <updated>2022-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程平台新版本功能特性。]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="image.png" src="/en/assets/images/logo-9bd69360af7a8fdb451b8de390c28c09.png" width="1768" height="274" class="img_ev3q"></p><h1>1. Preface</h1><ul><li><p>What Is ChaosBlade-Box?
ChaosBlade-Box is an open-source cloud-native Chaos Engineering console of Alibaba Cloud for multiple clusters, languages, and environments. The main features include a unified chaos experiment user interface, Chaos Engineering tool deployment (such as ChaosBlade and LitmusChaos), and the support for experimental scenario management and multi-dimensional experiments.</p></li><li><p>What Is ChaosBlade?
ChaosBlade is an easy-to-use, efficient, and open-source Chaos Engineering experimental tool of Alibaba Cloud, which conforms with the experimental model. It supports multi-platform, multi-language environment, and more than 200 drill scenarios, such as host system -&gt; container -&gt; Kubernetes cluster -&gt; common components (Elasticsearch, Redis, and MySQL) -&gt; application (Java, Golang, C++, and NodeJS), and over 3,000 parameters.</p></li><li><p>What Is Chaos Engineering?
Chaos Engineering is a discipline that conducts experiments on distributed systems. Chaos Engineering helps detect weak points of systems in advance, promotes the improvement of the architecture, and finally realizes business resilience by actively injecting faults.</p></li></ul><p>Since 2021, major enterprises have paid attention to and invested in the research and development of Chaos Engineering. ChaosBlade (an open-source Chaos Engineering tool from Alibaba) has officially become a CNCF Sandbox project. A new version of the ChaosBlade-Box was released to help users of open-source projects implement Chaos Engineering better. The following sections describe the features of the new version.</p><h1>2. An Introduction to the New ChaosBlade-Box</h1><p>ChaosBlade-Box aims to build a unified Chaos Engineering operation platform. Since its release, it has received extensive attention from the open-source community. There are also the following problems.</p><ul><li>The Community Edition has insufficient support for drills on Kubernetes clusters, which is mainly due to the inability to obtain cluster-related data for drill application selection automatically and cumbersome drill steps that need to fill in cluster configuration manually information to locate a cluster. As a result, it is inconvenient to use.
The Community Edition cannot meet the needs of developers in the international open-source community. Also, it has insufficient control capabilities for probes.</li><li>The Community Edition and the Enterprise Edition are separate from each other, which impacts the user experience and causes heavy migration costs when users of open-source projects turn to the Enterprise Edition later. The costs are related to data migration and operating habits.</li></ul><p>In view of the problems above, the ChaosBlade-Box and Agent were revised significantly to integrate the Community Edition with the kernel of the Enterprise Edition, unify user operation habits, upgrade the system architecture of the Community Edition, and enhance its component features.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="21-an-overall-introduction-to-chaosblade-box">2.1 An Overall Introduction to ChaosBlade-Box<a class="hash-link" href="#21-an-overall-introduction-to-chaosblade-box" title="Direct link to heading">​</a></h2><p>The new ChaosBlade-Box console is a multi-cluster, multi-environment, and multi-language cloud-native Chaos Engineering platform. It provides Chinese and English versions and supports global namespaces. Therefore, the same user can set different global namespaces according to their needs, such as test space, sandbox space, and online space. It offers automated tool deployment to simplify tool installation steps and improve execution efficiency. ChaosBlade-Box supports probe installation and drills in different environments, such as hosts and Kubernetes. It supports drills in nodes, pods, and containers in the Kubernetes environment. Data related to pods in a cluster is automatically collected and managed in a unified manner in application management. Thus, it simplifies the steps of the user drill query. Users do not need to go to the cluster to view the names of the pods or containers of the applications needed to be drilled. It also supports one-click migration to the Enterprise Edition and synchronizes drill data from the Community Edition to the Enterprise Edition as needed.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/195e46237592afcf57adf52d50d8ea136d2de43d.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="22-the-new-drill-process">2.2 The New Drill Process<a class="hash-link" href="#22-the-new-drill-process" title="Direct link to heading">​</a></h2><p>The following is the whole process of a drill on the new ChaosBlade-Box platform. Sequential execution and stage execution are supported. Sequential execution refers to multiple drill scenarios taking effect in sequence, while stage execution is multiple drill scenarios taking effect at the same time. A variety of security policies are used to ensure the drill is resumed, such as manual penalty and automatic stop. Automatic stop is configured by setting the timeout parameter during the drill configuration. This way, even if the platform and the probe (agent) are disconnected and cannot perform manual stop, the fault can be automatically recovered when the system reaches the timeout period.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/9701a60906c4e4d2f79bdb9347567f12937a58ae.png" class="img_ev3q">
<img loading="lazy" src="https://yqintl.alicdn.com/85d11b85170e8c18ac8e377c1770ca5295214dce.png" class="img_ev3q"></p><h1>3. An Introduction to the Architecture</h1><p>The following figure illustrates the system architecture of the new ChaosBlade and its component features:</p><p><img loading="lazy" src="https://yqintl.alicdn.com/c0fb4cedc18aaf4f663b529865591598cd693204.png" class="img_ev3q"></p><p><strong>Components</strong> </p><ul><li>ChaosBlade-Box Console: The Chaos Engineering console frontend is responsible for frontend interface interaction.</li><li>ChaosBlade-Box Server: It mainly provides capabilities for drill orchestration, scenario management, drill tool hosting, and one-click migration.</li><li>Agent: As the probe of Chaos Engineering, it is mainly used for issuing and executing commands for data collection and drill.</li><li>ChaosBlade: As a chaotic engineering experiment tool, it supports different environments such as hosts, Docker, and Kubernetes.</li></ul><h1>4. Advantages of the New ChaosBlade-Box</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="41-an-upgrade-to-chaosblade-box-features">4.1 An Upgrade to ChaosBlade-Box Features<a class="hash-link" href="#41-an-upgrade-to-chaosblade-box-features" title="Direct link to heading">​</a></h2><p>The console of the new Community Edition has the following features:</p><p><strong>1) Internationalization</strong> </p><p>It supports languages switching between Chinese and English.</p><p><strong>2) Namespace Switch</strong></p><p>It supports global space switching, allowing the same user to set different global namespaces according to their needs, such as test space, sandbox space, and online space.</p><p><strong>3) More Smooth Drill Arrangement</strong></p><p>The smooth orchestration is consistent with the drill process orchestration of the Enterprise Edition. Also, it supports parallel or serial drill processes for multiple fault drills at the same time.</p><p><strong>4) Improved Application Management</strong></p><p>It provides more comprehensive application management features and supports applications deployed in the host and Kubernetes environments, including application overview, machine list, drill records, and application configuration.</p><p><strong>5) Seamless Migration</strong></p><p>It is consistent with the operation interface of the Enterprise Edition and provides the one-click migration feature. It can automatically replace the probe with the public cloud one, register the drill machine to the Enterprise Edition, and synchronize the drill data to the Enterprise Edition. As a result, it can easily and simply switch to the Enterprise Edition.</p><p><strong>6) Safety</strong></p><p>It offers multiple fault recovery strategies to ensure that the issued drills can be recovered.</p><p><strong>7) Multi-Environment Deployment</strong></p><p>It supports deployment methods in different environments, including hosts, Docker, and Kubernetes.</p><p><strong>8) Hierarchical Drill Scenarios</strong></p><p>The drill scenarios are displayed in different categories. When you create a drill, the drill scenarios can be displayed in different categories in real-time according to the selected drill target.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="42-an-upgrade-to-probe-agent-features">4.2 An Upgrade to Probe (Agent) Features<a class="hash-link" href="#42-an-upgrade-to-probe-agent-features" title="Direct link to heading">​</a></h2><p>The new probe (agent) has more features:</p><p><strong>1) Support for Drill Channels for Different Environments</strong></p><p>It can be used as a channel of drill command delivery in different environments. Thus, it simplifies the steps of the old version required to specify the kubeconfig of the cluster to perform the drill in the Kubernetes environment.</p><p><strong>2) A More Complete API</strong></p><p>It unifies the agent external API interface to facilitate expansion and docking.</p><p><strong>3) Automatic Data Collection and Reporting</strong></p><p>A new server that reports data related to Kubernetes to the console in the Kubernetes environment is added. This allows users to select drill targets in the Kubernetes environment.</p><p><strong>4) Automatic Uninstallation of the Probe</strong></p><p>The automatic probe uninstallation interface is added to directly control the probe installation and uninstallation in the console.</p><p><strong>5) Keep Alive</strong></p><p>Add a probe script to guarantee the liveness of the probe process</p><p><strong>6) Multi-Environment Deployment</strong></p><p>It supports deployment in different environments, including hosts, Docker, and Kubernetes.</p><h1>5. Summary</h1><p>Chaos Engineering is an approach to ensure the high availability of the system. Alibaba made ChaosBlade-Box (Chaos Engineering Console) open-source in 2021. ChaosBlade has been widely used as China's first open-source Chaos Engineering tool. It aims to help implement the Community Edition of Chaos Engineering, manage different open-source fault injection tools, and build a unified Chaos Engineering operation platform. This new version has a lot of improvements in the use of the user interface and the realization of functions, making it easier and more convenient to use and implement Chaos Engineering.</p><h1>6. Recommended Links</h1><p>[1]<!-- --> chaosblade-box: <a href="https://github.com/chaosblade-io/chaosblade-box" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-box</a></p><p>[2]<!-- --> chaosblade-box-agent: <a href="https://github.com/chaosblade-io/chaosblade-box-agent" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-box-agent</a></p><p>[3]<!-- --> chaosblade: <a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a></p>]]></content>
        <author>
            <name>蔡铭霞（铭少，@MandssS）</name>
            <uri>https://github.com/MandssS</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[混沌工程平台 ChaosBlade-Box 新版重磅发布]]></title>
        <id>/2022/06/24/ChaosBlade-Box-new-release</id>
        <link href="https://chaosblade.io/en/blog/2022/06/24/ChaosBlade-Box-new-release"/>
        <updated>2022-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程平台新版本功能特性。]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="image.png" src="/en/assets/images/logo-9bd69360af7a8fdb451b8de390c28c09.png" width="1768" height="274" class="img_ev3q"></p><h1>1. 前言</h1><ul><li><p>ChaosBlade-Box是什么？</p><blockquote><p>ChaosBlade-Box是面向多集群、多语言、多环境，阿里开源的云原生混沌工程控制台。主要功能有：统一混沌实验用户界面、混沌工程工具部署（ChaosBlade、LitmusChaos...）、支持实验场景管理和多维度实验等。</p></blockquote></li><li><p>ChaosBlade是什么？</p><blockquote><p>ChaosBlade是遵循实验模型、简单易用、功能强大的，阿里开源混沌工程实验工具。支持多平台、多语言环境，支持从 主机系统-&gt; 容器 -&gt; k8s集群 -&gt; 常用组件（ElasticSearch\Redis\Mysql...） -&gt; 应用 （Java\Golang\C++\NodeJS...）等200多个演练场景，3000多个参数。</p></blockquote></li><li><p>混沌工程是什么？</p><blockquote><p>混沌工程（Chaos Engineering）是在分布式系统上进行实验的学科，通过主动注入故障的方式，提前发现系统的薄弱点，推进架构的改进，最终实现业务韧性</p></blockquote></li></ul><p>2021年起进入混沌工程元年，各大公司纷纷关注并投入混沌工程的研发当中。阿里巴巴开源的混沌工程工具ChaosBlade正式成为CNCF Sandbox项目。为帮助开源用户更好的落地混沌工程，发布新版ChaosBlade-Box，以下主要介绍此次发布新版本的功能及特性。</p><h1>2. 新版ChaosBlade-Box介绍</h1><p>ChaosBlade-Box旨在建设统一的混沌工程操作平台，从发布以来，受到了开源社区的广泛关注。但也存在以下几个问题</p><ul><li>社区版对于k8s集群上演练的支持不足，主要表现为无法自动获取集群相关数据来进行演练应用选择、演练步骤繁琐需要手动填充集群配置信息来定位集群等，导致用户使用不够便捷</li><li>社区版无法满足国际开源社区同学的使用，也对探针的管控能力不足</li><li>社区版和企业版较为割裂，这使得用户体验大大降低，也使得开源用户后续转向企业版，存在较大的迁移成本，这里不止是数据迁移成本，还存在操作习惯上的迁移成本</li></ul><p>就以上问题，对ChaosBlade-Box及Agent进行一次大的改版，将社区版与企业版内核进行融合，统一用户操作习惯，升级社区版系统架构，并增强其组件功能。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="21-平台整体介绍">2.1 平台整体介绍<a class="hash-link" href="#21-平台整体介绍" title="Direct link to heading">​</a></h2><p>新版ChaosBlade-Box控制台是一个面向多集群、多环境、多语言的云原生混沌工程平台。支持国际化中英文切换，支持全局命名空间，使得同一用户可根据自己需求，设置不同的全局命名空间，如：测试空间、沙盒空间和线上空间等。提供自动化的工具部署，简化工具安装步骤，提高执行效率。平台支持不同环境的探针安装和演练，如主机和Kubernetes，其中Kubernetes环境下支持 Node、Pod、Container维度下的演练。在Kubernetes环境下会自动收集集群内的Pod相关数据，并在应用管理中进行统一管理，这样简化用户演练查询步骤，无需去集群内查看要演练应用的Pod名或Container名。并支持一键迁移到企业版，按需将社区版的演练数据同步到企业版。
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-overview-46755b6543ba912a3cc9eca17339071c.png" width="2720" height="1474" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="22-新版演练流程">2.2 新版演练流程<a class="hash-link" href="#22-新版演练流程" title="Direct link to heading">​</a></h2><p>以下是在新版ChaosBlade-Box平台上进行一次演练的全过程，支持顺序执行、阶段执行两种流程编排，顺序执行指的是多个演练场景依次生效，阶段执行值得是多个演练场景同时生效。通过多种安全策略保证演练得到恢复，如手动处罚和自动停止，自动停止通过在演练配置的时候设置超时参数来进行配置，这样即便平台和探针（Agent）失联，无法进行手动停止时，也能在超时时间到达的时候，自动恢复故障。</p><p><img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-workflow-dbbb2c3a557e6ff914a2d01dd56386fb.png" width="1320" height="689" class="img_ev3q">
<img loading="lazy" alt="image.png" src="/en/assets/images/chaosblade-box-result-dac16a602c9f1a570443bb747afb2c56.png" width="1302" height="678" class="img_ev3q"></p><h1>3.  架构介绍</h1><p>下图说明了新版本ChaosBlade的系统架构及其组件功能：
<img loading="lazy" alt="image.png" src="/en/assets/images/overall-architecture-7e874671c3f84bc5392272edad1453dc.png" width="2434" height="1964" class="img_ev3q">
<strong>组件</strong></p><ul><li>ChaosBlade-Box Console: 混沌工程控制台前端，负责前端界面交互</li><li>ChaosBlade-Box Server: 混沌工程控制台服务端，主要提供演练编排、场景管理、演练工具托管和一键迁移等功能</li><li>Agent: 混沌工程探针，主要用于数据收集和演练命令下发执行</li><li>ChaosBlade: 混沌工程实验工具，支持主机、docker和k8s等不同的环境</li></ul><h1>4. 新版优势</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="41-chaosblade-box功能升级">4.1 ChaosBlade-Box功能升级<a class="hash-link" href="#41-chaosblade-box功能升级" title="Direct link to heading">​</a></h2><p>新版社区版的控制台相较于老版控制台，有以下的功能升级：</p><p><strong>1）国际化</strong>
支持国际化的中英文切换</p><p><strong>2）命名空间切换</strong>
支持全局的空间切换，使得同一用户可根据自己需求，设置不同的全局命名空间，如：测试空间、沙盒空间和线上空间等</p><p><strong>3）更为流畅的演练编排</strong>
流畅编排和企业版的演练流程编排保持一致，支持同时多个故障演练的并行或串行的演练流程</p><p><strong>4）完善的应用管理</strong>
提供了更为完善的应用管理功能，同时支持在主机和k8s环境下部署的应用，包括了：应用概览、机器列表、演练记录和应用配置等。</p><p><strong>5）无缝迁移</strong>
与企业版的操作界面保持一致，并提供了一键迁移功能，能将探针自动替换成公有云探针，将演练机器注册到企业版中，并将演练数据同步到企业版。轻松简单切换到企业版中。</p><p><strong>6）安全</strong>
多种故障恢复策略，保证下发演练可恢复</p><p><strong>7）多环境部署</strong>
支持不同环境下的部署方式，包括主机、docker、k8s等</p><p><strong>8）层次分明的演练场景</strong>
对演练场景进行分类展示，在创建演练时，会根据选定演练目标不同，而实时展示不同分类展示的可演练场景</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="42-agent探针功能升级">4.2 Agent（探针）功能升级<a class="hash-link" href="#42-agent探针功能升级" title="Direct link to heading">​</a></h2><p>新版本探针（Agent）相较于老版本，有了较为多 的功能提升：</p><p><strong>1）支持不同环境演练通道</strong>
支持在不同环境作为演练命令下发通道，简化了老版在k8s环境下，需要指定集群的kubeconfig来进行演练</p><p><strong>2）更为完善的API</strong>
统一了探针对外API接口，方便扩展与对接</p><p><strong>3）数据自动收集并上报</strong>
新增在k8s环境下，将k8s相关数据进行上报到控制台的服务端，用于在k8s环境下，方便用户选择演练目标</p><p><strong>4）探针自动卸载</strong>
新增了探针自动卸载接口，直接在控制台直接控制探针安装与卸载</p><p><strong>5）持续保活</strong>
增加探活脚本，保障探针进程持续存活</p><p><strong>6）多环境部署</strong>
支持不同环境下的部署方式，包括主机、docker、k8s等</p><h1>5. 总结</h1><p>混沌工程 -- 保障系统高可用的手段之一，ChaosBlade作为国内第一家开源的混沌工程工具，得到了广泛应用，在2021年开源ChaosBlade-Box（混沌工程控制台），旨在助力社区版混沌工程落地，纳管不同开源的故障注入工具，建设统一的混沌工程操作平台。此次新的版本无论是在用户界面的使用上，还是功能实现上都有很多的提升，让用户更简单、更方便的使用，并落地混沌工程。</p><h1>6. 推荐社区</h1><p>[1]<!-- --> chaosblade-box: <a href="https://github.com/chaosblade-io/chaosblade-box" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-box</a>
<!-- -->[2]<!-- --> chaosblade-box-agent: <a href="https://github.com/chaosblade-io/chaosblade-box-agent" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-box-agent</a>
<!-- -->[3]<!-- --> chaosblade: <a href="https://github.com/chaosblade-io/chaosblade-box" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a></p><p>欢迎钉钉搜索群号 23177705 加入 CNCF chaosblade 社区交流钉群！</p>]]></content>
        <author>
            <name>蔡铭霞（铭少，@MandssS）</name>
            <uri>https://github.com/MandssS</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade, From the Chaos Engineering Experiment Tool to the Chaos Engineering Platform]]></title>
        <id>/2022/03/03/ChaosBlade-From-the-Chaos-Engineering-Experiment-Tool-to-the-Chaos-Engineering-Platform</id>
        <link href="https://chaosblade.io/en/blog/2022/03/03/ChaosBlade-From-the-Chaos-Engineering-Experiment-Tool-to-the-Chaos-Engineering-Platform"/>
        <updated>2022-03-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程在云原生架构下的落地与实践]]></summary>
        <content type="html"><![CDATA[<p>ChaosBlade is Alibaba's open-source chaos engineering project created in 2019. It has been added to CNCF Sandbox. At first, ChaosBlade was a multi-environment and multi-language chaos engineering experimental tool but developed into a multi-cluster, multi-environment, and multi-language chaos engineering platform called chaosblade-box. The platform supports experimental tool hosting and automatic tool deployment. The user's energy is focused on solving high-availability problems in the cloud-native process through chaos engineering and a unified user experiment interface. This article introduces ChaosBlade in detail from three stages, including the abstraction of the chaos experimental model, the open-source process of the chaos experimental tool, and the update of the chaos engineering platform.</p><p><strong>In this year's trusted cloud evaluation, the Alibaba Cloud fault drill platform passed the highest level (advanced certification required by the trusted cloud chaos engineering platform) with the highest score.</strong> </p><h1>Chaos Experimental Model</h1><p>The ChaosBlade project covers chaos experimental scenarios, such as basic resources, application services, and container services. In the beginning, the design of the experimental tool considers the unification of scenarios and the model, which facilitates the expansion and accumulation of scenarios and provides a model basis for the platform-hosted experimental tool to realize the unified scenario call. All experimental scenarios in the ChaosBlade project follow this experimental model design, which is described in detail below through the derivation, introduction, significance, and specific application of the experimental model.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-derivation-of-the-experimental-model">1. Derivation of the Experimental Model<a class="hash-link" href="#1-derivation-of-the-experimental-model" title="Direct link to heading">​</a></h2><p>Chaos experiments mainly include fault simulation. We generally describe faults in the following ways:</p><p>Disk A mounted on the machine 10.0.0.1 is full, and the service is unavailable.
The slow execution of B Dubbo services on all nodes delays the call of upstream A Dubbo services, resulting in slow user access.
All CPU cores on node B in Kubernetes cluster A are fully utilized, resulting in abnormal pod scheduling in cluster A.
The network of pod D in the Kubernetes cluster C is abnormal, which causes access exceptions in the service related to D.
We can use the following sentence to describe the failure: A certain component on a certain machine (or resources in the cluster, such as node and pod) failed, which caused the related impact. We can also view the fault detail by splitting the description, as shown in the following figure:</p><p><img loading="lazy" src="https://yqintl.alicdn.com/b137f6819df734ba681cf37d6005e4a24cbb9af7.png" class="img_ev3q"></p><p>These four parts can be used to describe the existing fault scenario. Therefore, we have abstracted a fault scenario model, also known as the chaos experimental model.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/795a1dba3eeeff01bcb04e277687f1cc4972a800.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-an-introduction-to-the-experimental-model">2. An Introduction to the Experimental Model<a class="hash-link" href="#2-an-introduction-to-the-experimental-model" title="Direct link to heading">​</a></h2><p>This experimental model is described in detail below:</p><p>-<strong>Scope</strong>: The scope of the experiment refers to the machines, clusters, and resources involved in the experiment.
Target: The experimental target refers to the component that bears the experiment. This includes CPU, network, and disk in basic resource scenarios, application components in Java scenarios, such as Dubbo, Redis, RocketMQ, and JVM, and Node, Pod, and the Container itself in container scenarios.
-<strong>Matcher</strong>: The experiment rule matcher defines relevant experiment matching rules based on the configured Target. You can configure multiple matchers. Each Target may have its own special matching conditions. For example, Dubbo and gRPC in the RPC field can be matched according to the services provided by the service provider and the services called by the service consumer. Redis in the cache field can be matched according to set and get operations. You can also extend the matcher, such as extending the experiment scenario execution strategy and controlling the experiment trigger time.
-<strong>Action</strong>: These are the specific scenarios of an experimental simulation. If the Target is different, the implementation scenarios are also different. For example, disks can simulate scenarios, such as full disk, high disk I/O, or disk hardware failure. Applications can abstract experimental scenarios, such as latency, exceptions, return of specified values (such as error codes and large objects), parameter tampering, and repeated calls. For container services, we can simulate Node, Pod, Container resource exceptions, or basic resource exceptions.
This model can answer the following questions that need to be clarified in implementing chaos experiments:</p><ul><li>What is the implementation scope of the chaos experiment?</li><li>What is the object of implementing the chaos experiment?</li><li>What are the conditions under which the subject triggers the experiment?</li><li>What experimental scenarios are implemented?</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-the-significance-of-the-experimental-model">3. The Significance of the Experimental Model<a class="hash-link" href="#3-the-significance-of-the-experimental-model" title="Direct link to heading">​</a></h2><p>The model has the following features:</p><ul><li>Concise: It has clear levels and is easy to understand.</li><li>General-Purpose: It covers all current fault scenarios, including basic resources, application services, container services, and cloud resources.</li><li>Easy to Implement: It is convenient to define clear interface specifications, and the expansion of experimental scenarios is simple to implement.</li><li>Language- and Field-Independent: It can be implemented in multiple languages and applied to multiple fields.</li></ul><p>This model has the following meanings:</p><ul><li>More accurate description of chaos experimental scenarios</li><li>A better understanding of chaos experiment injection</li><li>Convenient accumulation of existing experimental scenarios</li><li>Discovery of more scenarios based on the model</li><li>More standardized and concise chaos experimental tools</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-application-of-the-experimental-model">4. Application of the Experimental Model<a class="hash-link" href="#4-application-of-the-experimental-model" title="Direct link to heading">​</a></h2><p>The application of the chaos experimental model is summarized below:</p><ul><li>The chaos experimental model parameterizes the experimental scenario variables and normalizes the parameters.</li><li>The model can achieve the horizontal expansion of the experimental scenarios in other fields.</li><li>The chaos experimental model can be combined with standardization in other fields to facilitate the vertical expansion of scenarios.</li><li>Upper-layer scenarios in a field can reuse the scenario that follows the definition of the chaos experimental model.</li><li>The scenario description declared by the chaos experimental model can be well-connected to ChaosBlade.</li><li>Following the experimental model, the upper chaos experimental platform can be constructed easily.</li></ul><p>The following section focuses on ChaosBlade, a chaos engineering tool implemented based on this model.</p><h1>Chaos Engineering Experiment Tool: ChaosBlade</h1><p>In the beginning, Alibaba introduced chaos engineering to solve the dependency problem of microservices. Later, chaos engineering was used to verify the steady state of business services and cloud services. Then, it was used to guarantee the business continuity of public cloud and private cloud and verify the stability of cloud-native systems. Alibaba has accumulated rich scenarios and practical experience. At that time, the open-source tools related to chaos engineering had problems, such as scattered scenario capabilities, difficulty getting started, lack of experimental model standards, and difficulty expanding and accumulating scenarios. These problems make it difficult to realize platformization, and it is difficult to include these tools on one platform. Therefore, the execution tool ChaosBlade of chaos engineering experiment was opened. The section below describes it in detail through scenarios, usage methods, architecture design, and examples.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-chaos-experimental-scenario">1. Chaos Experimental Scenario<a class="hash-link" href="#1-chaos-experimental-scenario" title="Direct link to heading">​</a></h2><p>At the beginning of designing ChaosBlade, the ease of use and the convenience of scenario expansion are considered, which helps everyone use the tool and expand more experimental scenarios according to their needs. Following the chaos experimental model, a unified and concise execution tool was provided. The chaos experimental tool supports system platforms, such as Linux, Windows, Docker, and Kubernetes. It covers applications in Java, Golang, JavaScript, and C++. It involves more than 200 experimental scenarios and more than 3,000 experimental parameters (v1.0.0-GA). The following scenarios are included:</p><ul><li>Basic Resources: CPU, memory, network, disk, process, kernel, etc.</li><li>Application Services: Databases, caches, messages, JVM, microservices, etc. Any kind of method can be specified to inject various complex experimental scenarios, and any method or a line of code can be specified to inject delay, variable, return value tampering, and other experimental scenarios.</li><li>Docker Containers: Experimental scenarios, such as killing containers and CPU, memory, network, disk, and process in containers</li><li>Kubernetes Platform: Experimental scenarios, such as CPU, memory, network, disk, and process on nodes, experimental scenarios in Pod network and the Pod itself, such as killing Pod, and experimental scenarios in containers, such as the preceding Docker container</li><li>Cloud Resources: Alibaba Cloud ECS downtime and other experimental scenarios</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-tool-usage">2. Tool Usage<a class="hash-link" href="#2-tool-usage" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://yqintl.alicdn.com/ca4801527fab0074b2a0fd4d675569e453e3f7e8.png" class="img_ev3q"></p><p>ChaosBlade is a tool that can be used by downloading and decompressing directly. It does not need to be installed. The calling mode it supports includes a CLI mode that directly executes blade commands.</p><p>For example, in the figure above about network latency, if you add the -h parameter, you can see a very perfect command prompt. For instance, if I want to call port 9520 to experiment on network packet loss and align the previous experimental model, its target is network, its action is packet loss, and its matcher is to call the remote service port 9520. After successful execution, the experimental results will be returned. Each experimental scenario is regarded as an object, and it will return the UID. This UID is used for subsequent experimental management, such as destroying and querying experiments. To destroy the experiment, that is, to restore the experiment, execute the <code>blade destroy</code> command.</p><p>Another way to call ChaosBlade is Web mode, which exposes HTTP services by executing server commands. At the upper level, if you build your chaos experimental platform, you can call ChaosBlade directly through HTTP requests.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-tool-architecture-design">3. Tool Architecture Design<a class="hash-link" href="#3-tool-architecture-design" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://yqintl.alicdn.com/16a9118e25ea689b30a88a6a67dd4ba7e1ef8838.png" class="img_ev3q"></p><p>ChaosBlade is packaged into independent projects according to the field, and each project is implemented according to the best practices of each field. This meets the usage habits of each field and establishes the relationship with the chaosblade cli project through the chaos experimental model, making it convenient to use ChaosBlade for uniform calls. The experimental scenarios in each field are described in YAML files based on the chaos experimental model and exposed to the upper chaos experiment platform. The platform automatically senses the changes of the experimental scenario according to the changes in the description files. The platform can also be developed when no new scenarios are needed. This way, the chaos platform can focus more on other parts of the chaos project. The currently included actuator items are listed below:</p><ul><li>chaosblade is a chaos experiment management tool. It includes commands for creating experiments, destroying experiments, querying experiments, preparing experiment environments, and revoking experiment environments. It is an execution tool for chaos experiments. The execution methods include CLI and HTTP. It provides complete descriptions of commands, experimental scenarios, and scenario parameters. The operations are concise and clear.</li><li>chaosblade-spec-go is the Golang definition of the chaos experimental model, which helps implement scenarios that use the Golang language.</li><li>chaosblade-exec-os implements basic resource experimental scenarios, such as CPU, network, memory, and disk.</li><li>chaosblade-exec-docker implements Docker container experimental scenarios, standardized by calling the Docker API.</li><li>chaosblade-operator implements experimental scenarios on Kubernetes platforms. Chaos experiments are defined by the Kubernetes standard CRD mode. It is very convenient to use Kubernetes resource operations to create, update, and delete experimental scenarios, including using methods, such as kubectl and client-go. It can also be executed using the preceding chaosblade cli.</li><li>chaosblade-exec-jvm implements Java application experimental scenarios. It is dynamically mounted using Java Agent technology without any access. It can be used at no cost, supports uninstallation, and can completely recycle every resource created by the Agent.</li><li>chaosblade-exec-cplus implements C++ application experimental scenarios. It uses GDB technology to implement method-level and code line-level experimental scenario injection.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-examples">4. Examples<a class="hash-link" href="#4-examples" title="Direct link to heading">​</a></h2><p>An example of Dubbo microservice is used to introduce the use of ChaosBlade. This microservice Demo involves three-level calls. The consumer calls the provider, and the provider calls the base. The provider also calls the mk-demo database. The provider and the base have two instances.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/e203a88f1894dd439c1e31172a99245cc1039d79.png" class="img_ev3q"></p><p>The experimental scenario of this example is database call delay. First, we define the monitoring metrics: the number of slow SQL statements and alert information. The expected assumption: the number of slow SQL statements increases, and the DingTalk group receives slow SQL alerts. Next, perform the experiment. We use chaosblade directly. You can look at the lower left part of the figure above. When we inject the calls of MySQL query for demo-provider, if the database is demo and the table name is d_discount, 50% of query operations will be delayed by 600 milliseconds.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/2f6a45bd3f203182e552578bf7a6abd261e8c582.png" class="img_ev3q"></p><p>We use Alibaba Cloud ARMS for monitoring and alerting. As you can see, the DingTalk group receives an alert soon after performing the chaos experiment. The effect meets the expectation by comparing it with the monitoring metrics defined earlier. However, it should be noted that the results from this instance does not mean it will meet the expectation in the future, so continuous verification by chaos engineering is needed. If slow SQL statements occur, ARMS tracing analysis can be used to troubleshoot and locate them. You can see which statement is slow in execution.</p><h1>Chaos Engineering Platform: chaosblade-box</h1><p>Users expect to focus on solving system high availability problems through chaos engineering rather than the selection and deployment of experimental tools. Thus, ChaosBlade is upgraded, and the open-source chaosblade-box, a chaos engineering platform, is provided. The platform hosts mainstream chaos experimental tools, automates the deployment of tools, and implements chaos engineering through a unified operation page.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/fad6c07086319b8eea7d555cd2f8a35631756f34.png" class="img_ev3q"></p><p>The following section describes chaosblade-box through its features, architecture design, and use cases.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-features">1. Features<a class="hash-link" href="#1-features" title="Direct link to heading">​</a></h2><p>It has the following features:</p><ul><li>Support for Open-Source Experimental Tool Hosting: The platform can host mainstream experimental tools in the industry, such as its own chaosblade and external LitmusChaos. The chaos mesh experiment tool will also be hosted in the future.</li><li>A Wide Range of Experimental Scenarios: Basic resources (such as CPU, memory, network, disk, process, kernel, and file), application services in multiple languages (such as Java, C++, JavaScript, and Golang), and Kubernetes platform (covering resources such as Container, Pod, and Node)</li><li>Automated Deployment of Experimental Tools: Manual deployment of experimental tools is unnecessary. It can realize automatic deployment of experimental tools on hosts or clusters.</li><li>Unified User Interface of Chaos Experiments: Users do not need to care about the use of different tools, and they can perform chaos experiments on the unified user interface.</li><li>Multi-Dimensional Experiment Mode: It supports experiment orchestration from the dimension of hosts to Kubernetes resources and applications.</li><li>Integrated Cloud-Native Ecosystem: It uses Helm for deployment management, integrates Prometheus for monitoring, and supports the hosting of cloud-native experimental tools.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-platform-architecture-design">2. Platform Architecture Design<a class="hash-link" href="#2-platform-architecture-design" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://yqintl.alicdn.com/73a5c9df7f3036da52d543bd6e508570bd68bffa.png" class="img_ev3q"></p><p>You can use the console page to automate the deployment of managed tools, such as chaosblade and LitmusChaos, and unify the experimental scenarios according to the chaos experimental model established by the community. You can also divide the target resources according to hosts, Kubernetes, and applications and use the target manager to control them. On the experiment creation page, you can select target resources in a visible way. The platform executes experimental scenarios of different tools by calling chaos executor. You can observe the experiment metrics with access to Prometheus monitoring. Rich experiment reports will be provided in the future. The deployment of chaosblade-box is also very simple.</p><p>You can see the details on here.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-instructions">3. Instructions<a class="hash-link" href="#3-instructions" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://yqintl.alicdn.com/1d6afaff51d1d882f968fbc79647b1bf255b8030.png" class="img_ev3q"></p><p>After the installation and deployment are completed, you can configure the Kubernetes cluster or host information to view the cluster or host data on the Machine List page. Click Experiment Management to create the experiment. The drill dimensions include the host, node, pod, and container. After you select the corresponding dimension, the corresponding resource list appears, and you can select it easily. The drill contains all hosted experimental scenarios. After the experiment is created, you are redirected to the drill details page automatically. Click Execute to jump to the task details page.</p><p><img loading="lazy" src="https://yqintl.alicdn.com/2c1341f8817ac6529073c2ea2e7541243995b19e.png" class="img_ev3q"></p><p>The page of drill task details displays the basic information of the experiment and the status of the experiment task. You can easily control the experiment and clarify the status of the experiment task.</p><h1>The Future Planning</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-chaosblade">1. ChaosBlade<a class="hash-link" href="#1-chaosblade" title="Direct link to heading">​</a></h2><p>Based on cloud-native, ChaosBlade will provide a chaos engineering platform and chaos engineering experimental tools for multiple clusters, multiple environments, and multiple languages. Experimental tools continue to focus on the richness and stability of experimental scenarios, support more Kubernetes resource scenarios, normalize the experimental scenario standards of application service, and provide a standard implementation for experimental scenarios in multiple languages.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-chaosblade-box">2. chaosblade-box<a class="hash-link" href="#2-chaosblade-box" title="Direct link to heading">​</a></h2><p>In the future, the core functions of the Alibaba Cloud fault drill platform (with Advanced Certification of Chaos Engineering Platform in Trusted Cloud) will be open-sourced and integrated with the existing chaos engineering platform to open more capabilities. At the same time, it simplifies the deployment and implementation of chaos engineering tools. In the future, it will host more chaos experimental tools and be compatible with mainstream platforms. This way, it can implement scenario recommendations, provide integrated business and system monitoring, output experimental reports, and complete closed-loop chaos engineering operations on an easy-to-use basis.</p><h1>About Authors</h1><p>Xiao Changjun (Qionggu) is an Alibaba Technical Expert, Founder and Maintainer of the open-source project ChaosBlade, Head of Alibaba Cloud fault drill platform, an expert of Trusted Cloud Standards, and a chaos engineering expert with years of experience in distributed system architecture and stability construction.</p><p>Sang Jie works in the R&amp;D Center of Agricultural Bank of China and is engaged in big data R&amp;D in financial-related systems.</p>]]></content>
        <author>
            <name>肖长军（穹谷，@xcaspar）</name>
            <uri>https://github.com/xcaspar</uri>
        </author>
        <author>
            <name>Sang Jie</name>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[被你质疑价值的混沌工程，阿里巴巴已落地实践了9年]]></title>
        <id>/2021/12/08/chaos-engineering-value</id>
        <link href="https://chaosblade.io/en/blog/2021/12/08/chaos-engineering-value"/>
        <updated>2021-12-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[混沌工程价值，及其在阿里巴巴的落地情况]]></summary>
        <content type="html"><![CDATA[<p>转自：<a href="https://mp.weixin.qq.com/s/jHopgbHmWCuF0JHv7Z7Erg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/jHopgbHmWCuF0JHv7Z7Erg</a></p><p>为什么阿里巴巴、工商银行、中国移动、华泰证券……都在关注混沌工程？</p><p>自从 Netflix 开源 Chaos Monkey，越来越多的国内公司看到了混沌工程在建立系统在生产环境中信心的能力，开始尝试通过混沌工程提高可靠性。阿里巴巴作为国内较早对外输出混沌工程能力的企业，早在 2012 年就开始在电商业务上，尝试通过故障注入技术去解决微服务的依赖问题。</p><p>应用层追求更全面、更便利、更快捷的服务，倒逼技术层面系统越来越复杂，可供观测和持续维护的难度不断加大，错综相连的软件服务节点越发依赖技术手段和能力。随着分布式和云原生技术成为主流技术趋势，混沌工程也随之备受关注。由于混沌工程自身特性，#难以量化度量几乎成为业内共识，但对于企业混沌工程建设的成熟度，也需要探讨衡量标准。# </p><p>如今，随着中国信通院成立了国内首个混沌工程实验室，混沌工程在国内的发展走到了新阶段。为此，InfoQ 和阿里云资深技术专家中亭，聊了聊混沌工程在阿里巴巴的技术实践。</p><h1>9 年，混沌工程在阿里巴巴从探索到开源</h1><p>不同企业关注和引入混沌工程的时间不同，但开局类似。阿里巴巴最开始引入混沌工程，也是为了解决实际问题。据中亭介绍，阿里巴巴探索混沌工程的时间线和 Netflix 差不多，只不过 Netflix 从基础资源开始实践，阿里巴巴则是从应用层开始。阿里巴巴最开始是为了解决技术架构变化和组织变化的问题，才去演进一些新的实践。</p><p><img loading="lazy" src="https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VPjv3GbW4HtPl3XuSRibovbY2lN9tfRJa41L2pbQHibwhzb3ib7km5CyiacOxibMLoiaLxY056E4vHZzx3g/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="alibaba发展历程" class="img_ev3q"></p><p>混沌工程一步步走进阿里巴巴，可以分为五个阶段：</p><p>第一个阶段在 2012 年，阿里巴巴电商业务遇到了微服务依赖不合理的问题，导致整个系统架构出问题，花了很长的时间做依赖的自动识别及治理，最后通过打破业务和稳定性之间的边界、引入故障注入的技术，解决了微服务的问题。</p><p>第二个阶段，阿里巴巴开始尝试做线上容灾、异地多活等容灾技术。通过比较大的断网等机房切换演练等方式，解决问题。</p><p>第三个阶段在中亭眼里是里程碑的阶段。在 2015 年备战双十一之后，阿里巴巴技术团队发现整个备战的方法可以非常体系化：当系统复杂到一定阶段，纸面梳理已经难以解决问题，是否可以通过一种逆向的方式暴露问题？2015-2016 年，阿里巴巴开始去做线上故障演练，也是今天提到的混沌工程的前期阶段。中亭提到，在这个阶段的核心是希望借助混沌工程解决分布式技术，不只是微服务，对整个线上稳定性的问题做全方位的度量，包括工具系统和监控预案等。</p><p>第四个阶段开始于 2018年，阿里巴巴开始做两件事情：阿里云技术团队开始对云底座进行混沌工程探索，提升基础设施的韧性；伴随着阿里巴巴技术上云，开始把内部的高可用保障技术，通过云的方式对外输出，解决客户应用高可用的问题。可以看到，随着云服务云能力的对外输出，混沌工程能力开始服务外部客户。</p><p>等到第五个阶段，也就是在 2019 年 -2021 年，阿里巴巴在混沌工程上的探索开始分为两条线，一条是商业服务和开源一体化，清晰化技术演进路线、加速技术演进速度，体现在现在就是面向开发者的一站式混沌工程平台；另一条是阿里巴巴集团内部把混沌工程重视程度提到一个空前的规模。</p><p>据中亭介绍，2020 年阿里巴巴做了生产突袭项目，把所有可能影响高可用的重大故障因子，全部都聚合在一个平台，公司的管理层会在一个不定时的时刻随机的去发起这种突袭。这次生产突袭的核心要求是，被突袭业务具备在1分钟发现，5分钟定位，10 分钟恢复。</p><p>他谈到，在这个阶段，已经把混沌工程和阿里巴巴集团的上云，包括人员组织的应急，已经完全串联起来，在内部的阶段沉淀到今天，其实已经是一个比较好的阶段。据悉，在阿里巴巴内部，将“高可用架构”和“韧性架构组织”升级成为“安全生产”，目前混沌工程已经成为安全生产的一个基础能力，现在内部的各个团队借助混沌工程去自发性地做垂直演练。基本上覆盖了阿里巴巴内部的几千个应用，所有的核心业务都有覆盖，包括生态公司如考拉和高德。</p><p>“过去大家对混沌工程的理解会比较浅，主要可能就直接把它等同于故障注入了，出现混沌工程原则后，有了一个相对严谨的逻辑定义，如果用一句话概括的话，混沌工程分两层：一层是混沌工程平台，一层是混沌工程实践，两层配套才能帮助企业完整进行混沌工程落地。”中亭谈道。“整体来看，对混沌工程的理解应该是分层的，整条脉络串联起来的话，你会发现其实混沌工程在企业的整个技术周期或者研发周期很多地方有所影响。”</p><p>相较于测试关注的是固定的输入和输出是什么，混沌工程更加强调实验和探索。“一个非常明显的区别是，我在生产区执行各种实验，然后我是不希望去打破我在线上的一个稳态。”中亭谈道。InfoQ 在系列访谈中也发现，直接在生产环境做混沌工程测试，需要持谨慎态度，这是绝大部分业内专家的共识。</p><h1>“我”可以引入混沌工程吗？</h1><p>阿里巴巴的混沌工程实践经验是否可以套用到其他企业呢？从行业角度看，混沌工程技术没有明显的行业限制。在对混沌工程的拥抱程度上，中亭认为，从引入目的和策略上主要是两类企业：一类是与阿里巴巴类似的互联网企业，关注线上故障的应急；另一类是有自己的云或者阶段性上云的企业，面向 C 端或政策法规有要求的企业（如：证券、银行）。</p><p>由于混沌工程的属性和行业特殊性，在金融行业的尝试较早。一方面，金融行业是对高可用严谨性有着高要求的行业，另一方面，金融行业正在面临转型。“所以目前混沌工程、分布式数据库或者其他方面的架构升级，背后都需要这样一个抓手来配合，所以混沌工程是比较合适。”中亭告诉 InfoQ：“对互联网业务而言，线上可以分阶段来说，从爆炸半径来讲，阶段性的建设，配合环境技术单元化。”</p><p>不敢引入混沌工程，大多数企业的顾虑在于，不同部门对混沌工程的认知不清晰，担忧落地的结果。中亭建议想要引入混沌工程的企业，可以先围绕企业特点做针对性实验，内部要有明确的组织，知道如何配合战略落地某项的时间，不再走“老路”，对混沌工程持有发现故障、发现 bug 的态度，而是从系统管理角度想要度量全局稳定性能力。</p><p>从技术基础、组织架构、流程制度和技术、人才储备上来说，混沌工程对企业引入没有太多前置要求。中亭谈道：“对企业的技术架构没有特别的要求。混沌工程的前提要求是需要对企业稳态的观察指标有一个准确的描述，所以需要企业在可观测性上有一定的积累，有一些基础监控就可以了。”混沌工程主要解决两个层面的问题：单机的系统设计和周边环境的问题，比如磁盘、单机网络等；集群之间的问题，所以只要企业本身支持一定的分布式化，就可以落地。</p><p>据他介绍，在阿里巴巴内部有一个制度：第一，被演练过的所有发生的故障，都要具备线上可演练的机制，真正验证是否可以恢复；第二，所有微服务的架构或分布式系统的架构，一级或核心级应用与非核心级别的应用的关系不能是强依赖，需要有自己的预案；第三，从组织的角度有一定的验收，比如说监控发现率、问题处理率等，需要在一个量化的数字之间。中亭谈到，只这三条制度，企业从引入到落地就需要进行很长一段时间了。</p><h1>相辅相成的混沌工程和云原生</h1><p>经过多年的发展，目前从技术的角度，行业内已经有了一些通用的混沌工程实验解决方案供企业选择。可以看到的是，混沌工程的实验和云密切相关。随着云服务渗透到各行各业，逐渐发展成为新的行业基础设施，对云服务的韧性提出了更高要求，而混沌工程被验证可以有效检验云原生系统的韧性架构。</p><p>“韧性架构的前提是先要对架构有一个理解，不管是 Java 语言体系，还是 GO 语言体系，阿里云帮助客户做的第一件事是搭建整个架构，第二件事是尝试把内部发生过的故障、在行业看到的故障，以专家经验的方式固化在平台中，结合架构做针对性演练方案的推荐。当企业把这些场景都验收，企业系统的韧性就达到了一定的水平。”中亭谈道。</p><p>在企业上云早期，可以在上云前后的平行环境下，针对性地做混沌工程场景实验，观测整个架构的反应是否一致，进而为企业使用云服务、考量架构的容灾能力提供可判断的依据。在企业上云后，混沌工程实验可以帮助运维工程师检验云服务。中亭解释道：“大家会关注用云姿势是否正确，比如说容器中间件，来去看企业是不是按照云的最佳实践。”</p><p>无可讳言，对于混沌工程的价值，目前在业内还没有一个明确的度量标准，但是可以通过简单的例子来有效佐证。据中亭介绍，一方面可以先选定一个场景，从结果上看，混沌工程可以保证场景不劣化；另一方面，如果度量组织进行突袭，不管系统架构和人员架构怎么变，监控结果都在合理的范围内。总体而言，混沌工程的核心就是增强信心，保证系统在某个场景下的能力不退化。只要这个组织有度量“特定场景下能力是否退化”的指标，混沌工程的价值就显而易见了。</p><blockquote><p>嘉宾介绍：</p></blockquote><blockquote><p>中亭，2011 年加入阿里高可用架构团队，主导阿里混沌工程领域规模化实践落地。目前任全局高可用 &amp; 混沌工程团队技术负责人，负责异地多活和混沌工程领域的技术。QCon 大会出品人，混沌工程布道师。</p></blockquote>]]></content>
        <author>
            <name>张俊宝</name>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[暑期2021]]></title>
        <id>/2021/06/06/summer-2021</id>
        <link href="https://chaosblade.io/en/blog/2021/06/06/summer-2021"/>
        <updated>2021-06-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[开源软件供应链点亮计划]]></summary>
        <content type="html"><![CDATA[<p>欢迎参加<a href="https://summer.iscas.ac.cn/help/" target="_blank" rel="noopener noreferrer">开源软件供应链点亮计划</a> - 暑期 2021（以下简称 暑期 2021）是由 中国科学院软件研究所 与 openEuler 社区 共同举办的一项面向高校学生的暑期活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展。我们将联合各大开源社区，针对重要开源软件的开发与维护提供项目，并向全球高校学生开放报名。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="目录">目录<a class="hash-link" href="#目录" title="Direct link to heading">​</a></h2><ul><li><a href="#%E4%BB%BB%E5%8A%A1%E8%83%8C%E6%99%AF">任务背景</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95">任务清单</a></li><li><a href="#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F">联系方式</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="任务背景">任务背景<a class="hash-link" href="#任务背景" title="Direct link to heading">​</a></h2><p><strong>将 ChaosBlade 事件导出到 SkyWalking &amp; Prometheus</strong></p><p>通常，系统在运行过程中会发生很多事件，如进程异常、重启、混沌实验等。事件的发生可能会影响系统的稳定性。因此，我们需要输出混沌实验的事件，然后我们可以将事件导入到 SkyWalking 和 Prometheus ，用于后续系统分析统计等场景的使用。</p><p><strong>chaosblade-box 支持演练工具 chaos-mesh</strong></p><p>chaosblade-box 是一个场景丰富的混沌工程平台，chaosblade-box 的出生就包含了工具市场和拓展演练工具的能力，目前包含演练工具 chaosblade 和 litmuschaos，本次任务我们需要拓展对 chaos-mesh 演练工具的支持。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="任务清单">任务清单<a class="hash-link" href="#任务清单" title="Direct link to heading">​</a></h2><p>本次“暑期2021”总共有两个任务，分别是：</p><ul><li>任务一：<a href="https://github.com/chaosblade-io/chaosblade/issues/499" target="_blank" rel="noopener noreferrer">将 ChaosBlade 事件导出到 SkyWalking &amp; Prometheus</a></li><li>任务二：<a href="https://github.com/chaosblade-io/chaosblade/issues/498" target="_blank" rel="noopener noreferrer">chaosblade-box 支持演练工具 chaos-mesh</a></li></ul><p>在上一节已经介绍了任务的背景，下面小节中我们将以“任务一”和“任务二”来区分任务。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="任务一">任务一<a class="hash-link" href="#任务一" title="Direct link to heading">​</a></h3><p>本次任务主要在 chaosblade 和 chaosblade-operator 项目编码即可，Github 地址:</p><ul><li>chaosblade: <a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a></li><li>chaosblade-operator: <a href="https://github.com/chaosblade-io/chaosblade-operator" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-operator</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="要求的技能">要求的技能<a class="hash-link" href="#要求的技能" title="Direct link to heading">​</a></h4><ul><li>Golang, Kubernetes</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="Direct link to heading">​</a></h4><ul><li><a href="https://github.com/chaosblade-io/chaosblade/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97" target="_blank" rel="noopener noreferrer">chaosblade 新手指南</a></li><li><a href="https://github.com/chaosblade-io/chaosblade/blob/master/CLOUDNATIVE.md" target="_blank" rel="noopener noreferrer">chaosblade-operator 实现方案</a></li><li><a href="https://github.com/chaosblade-io/chaosblade/issues/495" target="_blank" rel="noopener noreferrer">skywalking 事件相关</a></li><li><a href="https://prometheus.io/docs/instrumenting/writing_exporters/" target="_blank" rel="noopener noreferrer">prometheus 自定义exporter</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="任务内容">任务内容<a class="hash-link" href="#任务内容" title="Direct link to heading">​</a></h4><ul><li>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 SkyWalking</li><li>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 Prometheus</li><li>在 chaosblade-operator 对 crd 监听器埋点，将 crd 状态的变更事件导出到 SkyWalking 和 Prometheus</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="实现步骤">实现步骤<a class="hash-link" href="#实现步骤" title="Direct link to heading">​</a></h4><ul><li>在 chaosblade exec 包下面分别包含很多执行器有 os、jvm、docker 等，需要对执行器的添加事件监听，来演练执行、演练恢复等事件</li><li>在 chaosblade-operator 项目下监听了 blade 自定义资源状态的变更，需要将 blade 状态的变更事件导出。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="工作量">工作量<a class="hash-link" href="#工作量" title="Direct link to heading">​</a></h4><table><thead><tr><th>任务</th><th>工作量</th></tr></thead><tbody><tr><td>了解混沌工程和 ChaosBlade，能够使用 ChaosBlade 对主机和 K8S 注入故障</td><td>5</td></tr><tr><td>可以尝试搭建 minikube ，安装 chaosblade-operator，了解 Operator 实现</td><td>3</td></tr><tr><td>了解 SkyWalking 和 Prometheus</td><td>5</td></tr><tr><td>熟悉 Prometheus 的 exporter</td><td>5</td></tr><tr><td>了解 SkyWalking 的事件导入方式，可自行选择一种方案，参考 <a href="https://github.com/chaosblade-io/chaosblade/issues/495" target="_blank" rel="noopener noreferrer">ISSUE</a></td><td>5</td></tr><tr><td>熟悉 chaosblade 执行器的模型定义</td><td>3</td></tr><tr><td>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 SkyWalking</td><td>5</td></tr><tr><td>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 Prometheus</td><td>5</td></tr><tr><td>在 chaosblade operator 对 crd 监听器埋点，将 crd 状态的变更事件导出到 SkyWalking 和 Prometheus</td><td>5</td></tr><tr><td>单元测试</td><td>3</td></tr><tr><td>集成测试</td><td>5</td></tr><tr><td>PR 交付</td><td>2</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="任务二">任务二<a class="hash-link" href="#任务二" title="Direct link to heading">​</a></h3><p>本次任务主要在 chaosblade-box 编码即可，Github 地址：<a href="https://github.com/chaosblade-io/chaosblade-box" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-box</a> ，可以 litmuschaos 是如何接入到 chaosblade-box 的。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="要求的技能-1">要求的技能<a class="hash-link" href="#要求的技能-1" title="Direct link to heading">​</a></h4><ul><li>java</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料-1">参考资料<a class="hash-link" href="#参考资料-1" title="Direct link to heading">​</a></h4><ul><li><a href="https://www.yuque.com/docs/share/bc9ad412-6f96-463b-b72d-6773b5fb5ea3?#" target="_blank" rel="noopener noreferrer">chaosblade-box 用户手册</a></li><li><a href="https://www.yuque.com/docs/share/fa43fd1e-9de0-4f55-900b-08ab4e8cf06a?#" target="_blank" rel="noopener noreferrer">chaosblade-box 开发手册</a></li><li><a href="https://chaos-mesh.org/docs" target="_blank" rel="noopener noreferrer">chaos-mesh 文档</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="任务内容-1">任务内容<a class="hash-link" href="#任务内容-1" title="Direct link to heading">​</a></h4><ul><li>添加 chaos-mesh 场景解析</li><li>添加 chaos-mesh 演练执行器</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="实现步骤-1">实现步骤<a class="hash-link" href="#实现步骤-1" title="Direct link to heading">​</a></h4><ul><li>在模块 chaosblade-box-scenario下添加一个 chaosblade-box-scenario-chaosmesh 的实现。</li><li>在模块 chaosblade-box-invoker 下添加一个 chaosblade-box-invoker-chaosmesh-kubeapi 实现。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="工作量-1">工作量<a class="hash-link" href="#工作量-1" title="Direct link to heading">​</a></h4><table><thead><tr><th>任务</th><th>工作量</th></tr></thead><tbody><tr><td>了解 chaosblade-box，并且能部署和使用</td><td>5</td></tr><tr><td>了解 chaos-mesh，能使用 chaos-mesh 注入故障</td><td>5</td></tr><tr><td>了解 chaosblade-box 的工具市场设计，考虑如何接入 chaos-mesh</td><td>3</td></tr><tr><td>熟悉 chaos-mesh 的混沌实验模型和 CRD 定义</td><td>5</td></tr><tr><td>在 chaosblade-box 解析 chaos-mesh 的混沌实验模型和 CRD</td><td>5</td></tr><tr><td>熟悉 chaos-mesh 的演练创建的流程</td><td>5</td></tr><tr><td>在 chaosblade-box 创建 chaos-mesh 的演练</td><td>5</td></tr><tr><td>单元测试</td><td>3</td></tr><tr><td>集成测试</td><td>5</td></tr><tr><td>PR 交付</td><td>2</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="联系方式">联系方式<a class="hash-link" href="#联系方式" title="Direct link to heading">​</a></h2><ul><li>ChaosBlade 钉钉讨论群号：23177705</li><li>邮箱：<a href="mailto:chaosblade.io.01@gmail.com" target="_blank" rel="noopener noreferrer">chaosblade.io.01@gmail.com</a></li></ul>]]></content>
        <author>
            <name>叶飞</name>
            <uri>https://github.com/tiny-x</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[混沌工程介绍与实践]]></title>
        <id>/2021/05/21/chaos-engineering</id>
        <link href="https://chaosblade.io/en/blog/2021/05/21/chaos-engineering"/>
        <updated>2021-05-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程，为什么需要混沌工程以及混沌工程相关工具与实践。]]></summary>
        <content type="html"><![CDATA[<p>在分布式系统架构下，服务间的依赖日益复杂，很难评估单个服务故障对整个系统的影响，并且请求链路长，监控告警的不完善导致发现问题、定位问题难度增大，同时业务和技术迭代快，如何持续保障系统的稳定性和高可用性受到很大的挑战。我们知道发生故障的那一刻不是由你来选择的，而是那一刻来选择你，你能做的就是为之做好准备。所以构建稳定性系统很重要的一环是混沌工程，在可控范围或环境下，通过故障注入，来持续提升系统的稳定性和高可用能力。<br>
<!-- -->本文会着重介绍什么是混沌工程，为什么需要混沌工程以及混沌工程相关工具与实践。如有遗漏或错误，欢迎补充指正。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="目录">目录<a class="hash-link" href="#目录" title="Direct link to heading">​</a></h2><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B">什么是混沌工程</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B">为什么需要混沌工程</a></li><li><a href="#%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%96%BD%E5%8E%9F%E5%88%99">混沌工程实施原则</a></li><li><a href="#%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%96%BD%E6%AD%A5%E9%AA%A4">混沌工程实施步骤</a></li><li><a href="#%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7%E4%BA%A7%E5%93%81">推荐工具&amp;产品</a></li><li><a href="#%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B">混沌工程实践案例</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%E4%BA%A4%E6%B5%81%E7%BE%A4">相关文章&amp;交流群</a></li><li><a href="#%E5%8A%A0%E5%85%A5%E6%88%91%E4%BB%AC">加入我们</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是混沌工程">什么是混沌工程<a class="hash-link" href="#什么是混沌工程" title="Direct link to heading">​</a></h2><p>混沌工程是在 <a href="https://principlesofchaos.org/" target="_blank" rel="noopener noreferrer">混沌工程理论</a> 一文中提出，但在 2010 年 Netflix 从物理机基础设施迁移到 AWS 过程中，为保证 EC2 实例故障不会对业务造成影响，其团队开发出了杀 EC2 实例的工具，这也是混沌工程的雏形。在 2015 年社区发布《混沌工程理论》一文后，混沌工程开始快速发展。<br>
<!-- -->混沌工程是在分布式系统上进行实验的学科，旨在提升系统容错性，建立系统抵御生产环境中发生不可预知问题的信心。”打不倒我的必使我强大“，尼采的这句话很好了诠释了混沌工程反脆弱的思想。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要混沌工程">为什么需要混沌工程<a class="hash-link" href="#为什么需要混沌工程" title="Direct link to heading">​</a></h2><p>分布式系统日益复杂，而且在系统逐渐云化的背景下，系统的稳定性受到很大的挑战。这里从四个角色来说明混沌工程的重要性。</p><ul><li>对于架构师来说，可以验证系统架构的容错能力，比如验证现在提倡的面向失败设计的系统；</li><li>对于开发和运维，可以提高故障的应急效率，实现故障告警、定位、恢复的有效和高效性。</li><li>对于测试来说，可以弥补传统测试方法留下的空白，之前的测试方法基本上是从用户的角度去做，而混沌工程是从系统的角度进行测试，降低故障复发率。</li><li>对于产品和设计，通过混沌事件查看产品的表现，提升客户使用体验。所以说混沌工程面向的不仅仅是开发、测试，拥有最好的客户体验是每个人的目标
所以实施混沌工程，可以提早发现生产环境上的问题，并且可以以战养战，提升故障应急效率和可以使用体验，逐渐建设高可用的韧性系统。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混沌工程实施原则">混沌工程实施原则<a class="hash-link" href="#混沌工程实施原则" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409822-858d2f80-c424-11e9-9aac-58f34a0f5c6d.png" alt="chaos-eng-rules" class="img_ev3q"></p><ul><li>第一条：”建立一个围绕稳定状态行为的假说“，其包含两个含义，一个是定义能直接反应业务服务的监控指标，需要注意的是这里的监控指标并不是系统资源指标，比如CPU、内存等，这里的监控指标是能直接衡量系统服务质量的业务监控。举个例子，一个调用延迟故障，请求的 RT 会变长，对上层交易量造成下跌的影响，那么这里交易量就可以作为一个监控指标。这条原则的另一个含义是故障触发时，对系统行为作出假设以及监控指标的预期变化。</li><li>第二条指模拟生产环境中真实的或有理论依据的故障场景，比如依赖的服务调用延迟、超时、异常等。</li><li>第三条建议在生产环境中运行实验，但也不是说必须在生产环境中执行，只是实验环境越真实，混沌工程越有价值，但如果知道系统在某个故障场景下不具备容灾能力，不可以执行此混沌实验，避免资损发生。</li><li>第四条，持续的执行才能持续的降低故障复发率和提前发现故障，所以需要持续的自动化运行试验。</li><li>最后一个，混沌工程很重要的一点是控制爆炸半径，也就是试验影响面，防止预期外的资损发生，可以通过环境隔离或者故障注入工具提供的配置粒度来控制。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混沌工程实施步骤">混沌工程实施步骤<a class="hash-link" href="#混沌工程实施步骤" title="Direct link to heading">​</a></h2><ul><li>制订混沌实验计划</li><li>定义系统稳态指标</li><li>做出系统容错行为假设</li><li>执行混沌实验</li><li>检查系统稳态指标</li><li>记录&amp;恢复混沌实验</li><li>修复发现的问题</li><li>自动化持续进行验证</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="推荐工具产品">推荐工具产品<a class="hash-link" href="#推荐工具产品" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409859-9473e200-c424-11e9-89bc-09eff69dd390.jpg" alt="awesome-chaos-engineering.png" class="img_ev3q">
大家可以从工具的场景丰富度、类型、易用性等方面来选择一款合适的工具，awesome-chaos-engineering Github 项目收纳了一些开源的混沌工程工具，在 CNCF Landscape 中混沌工程作为单独的一个领域存在，并且收纳了一些主流的工具，包含阿里巴巴开源的 ChaosBlade 工具和 AHAS 阿里云产品。
<img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409944-b705fb00-c424-11e9-887f-5e057b31536a.jpg" alt="cncf-landscape.png" class="img_ev3q">
下文重点介绍 ChaosBlade 及其相关实践。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="chaosblade">ChaosBlade<a class="hash-link" href="#chaosblade" title="Direct link to heading">​</a></h3><p>ChaosBlade 中文名混沌之刃，是一款混沌实验实施工具，支持丰富的实验场景，比如应用、容器、基础资源等。工具使用简单，扩展方便，其遵循社区提出的混沌实验模型。Github 地址：<a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="功能和特点">功能和特点<a class="hash-link" href="#功能和特点" title="Direct link to heading">​</a></h4><p><strong>场景丰富度高</strong>
ChaosBlade 支持的混沌实验场景不仅覆盖基础资源，如 CPU 满载、磁盘 IO 高、网络延迟等，还包括运行在 JVM 上的应用实验场景，如 Dubbo 调用超时和调用异常、指定方法延迟或抛异常以及返回特定值等，同时涉及容器相关的实验，如杀容器、杀 Pod。后续会持续的增加实验场景。</p><p><strong>使用简洁，易于理解</strong>
ChaosBlade 通过 CLI 方式执行，具有友好的命令提示功能，可以简单快速的上手使用。命令的书写遵循阿里巴巴集团内多年故障测试和演练实践抽象出的故障注入模型，层次清晰，易于阅读和理解，降低了混沌工程实施的门槛。</p><p><strong>动态加载，无侵入</strong>
ChaosBlade采用动态故障注入的方式，执行混沌实验时用户系统不需要做任何系统改造或发布，开箱即用。</p><p><strong>场景扩展方便</strong>
所有的 ChaosBlade 实验执行器同样遵循上述提到的故障注入模型，使实验场景模型统一，便于开发和维护。模型本身通俗易懂，学习成本低，可以依据模型方便快捷的扩展更多的混沌实验场景。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="使用方式">使用方式<a class="hash-link" href="#使用方式" title="Direct link to heading">​</a></h4><p>在 ChaosBlade Release 页面下载最新版本的包，解压即用。如创建一个 CPU 满载实验，命令为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">blade create cpu fullload</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>具体使用方式可详见：<a href="https://github.com/chaosblade-io/chaosblade/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97" target="_blank" rel="noopener noreferrer">ChaosBlade 新手指南</a></p><p>中文使用文档：<a href="https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/" target="_blank" rel="noopener noreferrer">帮助文档</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="混沌实验模型">混沌实验模型<a class="hash-link" href="#混沌实验模型" title="Direct link to heading">​</a></h4><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409808-80c87b80-c424-11e9-9fa8-26b52e1fef73.jpg" class="img_ev3q">
该模型分四次，层层递进，很清晰的表达出对什么组件做实验，实验范围是什么，实验触发的匹配规则有哪些，执行什么实验。该模型简洁、通用，语言领域无关、易于实现。阿里集团内的 C++、NodeJS、Dart 应用以及容器平台的实验场景都基于此模型实现。此模型具有很重要的意义，依据此模型可以更精准的描述、更好的理解、更方便沉淀实验场景以及发掘更多的场景。依据此模型实现的工具更加规范、简洁。实验模型介绍可详见：<a href="https://github.com/chaosblade-io/chaosblade/wiki/%E6%B7%B7%E6%B2%8C%E5%AE%9E%E9%AA%8C%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">混沌实验模型介绍</a>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混沌工程实践案例">混沌工程实践案例<a class="hash-link" href="#混沌工程实践案例" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409672-35ae6880-c424-11e9-8a93-f4b10bdf6afb.png" alt="Screen Shot 2019-08-21 at 2.44.42 P" class="img_ev3q">
此拓扑图来自于阿里云 AHAS 产品架构感知功能，可自动感知架构拓扑，并且可以展示进程、网络、节点等数据。这个分布式服务 Demo 分三级调用，consumer 调用 provider，provider 调用 base，同时 provider 还调用 mk-demo 数据库，provider 和 base 服务具有两个实例，在 AHAS 架构拓扑图上，我们点击一个实例节点，可以到非常清晰的调用关系。我们后面结合这个 Demo 去讲解实践。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="验证监控告警">验证监控告警<a class="hash-link" href="#验证监控告警" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409252-63df7880-c423-11e9-9b39-13e9e5dca075.png" alt="Screen Shot 2019-08-21 at 2.43.36 P" class="img_ev3q"><br>
<img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409276-6e017700-c423-11e9-945d-4312005ba27e.png" alt="Screen Shot 2019-08-21 at 2.43.58 P" class="img_ev3q">
案例一，我们验证系统的监控告警性有效性。按照前面提到的混沌工程实施步骤，那么这个案例执行的实验场景是数据库调用延迟，我们先定义监控指标：慢 SQL 数和告警信息，做出期望假设：慢 SQL 数增加，钉钉群收到慢 SQL 告警。接下来执行实验。我们直接使用 ChaosBlade 工具执行，可以看下左下角，我们对 demo-provider 注入调用 mysql 查询时，若数据库是 demo 且表名是 d_discount，则对 50% 的查询操作延迟 600 毫秒。我们使用阿里云产品 ARMS 做监控告警。大家可以看到，当执行完混沌实验后，很快钉钉群里就收到了报警。所以我们对比下之前定义的监控指标，是符合预期的。但需要注意的是这次符合预期并不代表以后也符合，所以需要通过混沌工程持续性的验证。出现慢 SQL，可通过 ARMS 的 <a href="https://help.aliyun.com/document_detail/63796.html" target="_blank" rel="noopener noreferrer">链路追踪</a> 来排查定位，可以很清楚的看出哪条语句执行慢。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="案例二">案例二<a class="hash-link" href="#案例二" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409297-778adf00-c423-11e9-9179-d991eab7b6db.png" alt="Screen Shot 2019-08-21 at 2.44.07 P" class="img_ev3q">
前面讲了一个符合预期的案例，我们再来看一个不符合预期的。此案例是验证系统异常实例隔离的能力，我们的 Demo 中 consumer 调用 provider 服务，provider 服务具有两个实例，我们对其中一个注入延迟故障，监控指标是 consumer 的 QPS，稳态在 510 左右。我们做的容错假设是系统会自动隔离或下线出问题的服务实例，防止请求路由的此实例，所有 QPS 会有短暂的下跌，但很快会恢复。这个案例，我们使用阿里云 AHAS 混沌实验平台来执行，我们对 demo-provider-1 注入延迟故障，基于此平台可以很方便的执行混沌实验。执行混沌实验后，QPS 下跌到 40 左右，很长时间没有自动恢复，所以不符合预期，我们通过人工的方式对该异常的实例做下线处理，很快就看到，consumer 的 QPS 恢复正常。所以我们通过混沌工程发现了系统问题，我们后面需要做就是记录此问题，并且推动修复，后续做持续性的验证。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="加入我们">加入我们<a class="hash-link" href="#加入我们" title="Direct link to heading">​</a></h2><ul><li>ChaosBlade 钉钉讨论群号：23177705</li></ul>]]></content>
        <author>
            <name>肖长军（穹谷，@xcaspar）</name>
            <uri>https://github.com/xcaspar</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade：从零开始的混沌工程（五）]]></title>
        <id>/2020/08/06/chaosblade-start-5</id>
        <link href="https://chaosblade.io/en/blog/2020/08/06/chaosblade-start-5"/>
        <updated>2020-08-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>在上篇文章中，我们介绍了如何使用 <strong>ChaosBlade Operator</strong> 对 node 资源进行混沌实验。从本章将继续对 Kubernetes Container 资源的混沌实验进行讲解，同时也配套了 <a href="https://katacoda.com/" target="_blank" rel="noopener noreferrer">katacode</a> 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade，同时本篇也是系列文章的倒数第二篇，实践内容的最后一篇。</p><blockquote><p>katacode 现已关闭</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实验对象container">实验对象：Container<a class="hash-link" href="#实验对象container" title="Direct link to heading">​</a></h2><p>Pod 由一个或多个容器（Container）组成。容器（Container）是一种用来打包已经编译好的代码以及运行时需要的各个依赖项的技术。您运行的每个容器都是可以重复运行的；包含依赖项的标准化意味着您在任何地点运行它都会得到相同的结果。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="container-实验场景">Container 实验场景<a class="hash-link" href="#container-实验场景" title="Direct link to heading">​</a></h2><p>同之前的文章，本篇默认已安装 <a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6" target="_blank" rel="noopener noreferrer">guestbook</a> 应用和 ChaosBlade Operator。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="container-资源自身的场景">container 资源自身的场景<a class="hash-link" href="#container-资源自身的场景" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="删除-container">删除 container<a class="hash-link" href="#删除-container" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：删除 chaosblade 命名空间下，Pod 名为 <code>guestbook-7b87b7459f-cqkq2</code> 中 container id 是 <code>c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed</code> 的容器。</p><p><strong>开始实验</strong></p><p><code>remove_container_by_id.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> remove</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> remove</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"remove container by id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># pod name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"guestbook-7b87b7459f-cqkq2"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取 container 名称：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod guestbook-7b87b7459f-cqkq2 -o custom-columns</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">CONTAINER:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.name,ID:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.containerID</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改 <code>remove_container_by_id.yaml</code> 中的 <code>container-ids</code> 和 <code>names</code>。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f remove_container_by_id.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade remove-container-by-id -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><p>查看容易 ID，可以看到容器ID发生了变化，旧容器被删除了，拉起了新容器。</p><p><img loading="lazy" src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1ghh7lolrl9g20xq0g67wh.gif" alt="删除 container" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f remove_container_by_id.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade remove-container-by-id</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="container-内cpu负载场景">container 内CPU负载场景<a class="hash-link" href="#container-内cpu负载场景" title="Direct link to heading">​</a></h3><p><strong>实验目标</strong>：指定 chaosblade 命名空间下 Pod 名为 <code>guestbook-7b87b7459f-cqkq2</code>，container id 为 2ff814b246f86，使其 CPU 负载为 100%。</p><p><strong>实验准备</strong></p><p>由于使用 helm 安装的 <a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6" target="_blank" rel="noopener noreferrer">guestbook</a> 没有对资源进行限制，进行负载实验的话，会导致整个节点的故障，所以在实验之前需要<strong>对资源进行限制</strong>。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl patch deployment redis-slave --patch </span><span class="token string" style="color:#e3116c">'{"spec": {"template": {"spec": {"containers": [{"name": "redis-slave","resources": {"limits":{"cpu":"300m","memory":"512Mi"} }}]}}}}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>开始实验</strong></p><p><code>increase_container_cpu_load_by_id.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> increase</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">cpu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">load</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> cpu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> fullload</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"increase container cpu load by id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> cpu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"100"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># pod names</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-slave-55d8c8ffbd-jd8sm"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取 container 名称：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod redis-slave-55d8c8ffbd-jd8sm -o custom-columns</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">CONTAINER:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.name,ID:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.containerID</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改 <code>increase_container_cpu_load_by_id.yaml</code> 中的 <code>container-ids</code> 和 <code>names</code>。</p><p><strong>查看实验状态</strong></p><p>执行命令：<code>kubectl get blade increase-container-cpu-load-by-id -o json</code>，查看实验状态。</p><p><strong>观测结果</strong></p><p>可从监控系统观测到结果</p><p><img loading="lazy" src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghh7p4zsblj20ct07eaac.jpg" alt="container 内CPU负载场景" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f increase_container_cpu_load_by_id.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade increase-container-cpu-load-by-id</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="container-内网络实验场景">container 内网络实验场景<a class="hash-link" href="#container-内网络实验场景" title="Direct link to heading">​</a></h3><p>该场景与 Pod 实验场景类似。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="container-网络延迟场景">container 网络延迟场景<a class="hash-link" href="#container-网络延迟场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：对 chaosblade 命名空间中，对 <code>redis-master-68857cd57c-hknb6</code> Pod 中 container id 是 <code>02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e</code> 的容器的 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。</p><p><strong>实验参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>destination-ip</code></td><td>string</td><td>目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。</td></tr><tr><td><code>exclude-port</code></td><td>string</td><td>排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 --local-port 或者 --remote-port 参数一起使用。</td></tr><tr><td><code>exclude-ip</code></td><td>string</td><td>排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。</td></tr><tr><td><code>interface</code></td><td>string</td><td>网卡设备，例如 eth0 (必要参数)。</td></tr><tr><td><code>local-port</code></td><td>string</td><td>本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。</td></tr><tr><td><code>offset</code></td><td>string</td><td>延迟时间上下浮动的值, 单位是毫秒。</td></tr><tr><td><code>remote-port</code></td><td>string</td><td>远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。</td></tr><tr><td><code>time</code></td><td>string</td><td>延迟时间，单位是毫秒 (必要参数)。</td></tr><tr><td><code>force</code></td><td></td><td>强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。</td></tr><tr><td><code>ignore-peer-port</code></td><td></td><td>针对添加 --exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。</td></tr><tr><td><code>timeout</code></td><td>string</td><td>设定运行时长，单位是秒，通用参数。</td></tr></tbody></table><p><strong>开始实验</strong></p><p><code>delay_container_network_by_id.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay container network by container id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-hknb6"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> local</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"6379"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"eth0"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"3000"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> offset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"1000"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取 Pod 名称和 container id：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod redis-master-68857cd57c-hknb6 -o custom-columns</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.name,ID:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.containerID</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改 <code>delay_container_network_by_id.yaml</code> 中的 <code>container-ids</code> 和 <code>names</code>。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f delay_container_network_by_id.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade delay-container-network-by-id -o json</code> 命令，查看实验状态.</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 获取实验 pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token assign-left variable" style="color:#36acaa">app</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">redis,role</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">master -o </span><span class="token assign-left variable" style="color:#36acaa">jsonpath</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.items</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">status.podIP</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-55d8c8ffbd-jd8sm </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 在 pod 中安装 telnet</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> update </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -y telnet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 测试时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> telnet </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19 </span><span class="token number" style="color:#36acaa">6379</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connected to </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Escape character is </span><span class="token string" style="color:#e3116c">'^]'</span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connection closed by foreign host.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m3.790s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m0.007s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0.001s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ghh7s2brmxg20si05w16r.gif" alt="container 网络延迟场景" class="img_ev3q"></p><p>可以看到结果符合预期。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f delay_container_network_by_id.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade delay-container-network-by-id</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="container-网络丢包场景">container 网络丢包场景<a class="hash-link" href="#container-网络丢包场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：对 chaosblade 命名空间中，对 <code>redis-master-68857cd57c-hknb6</code> Pod 中 container id 是 <code>02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e</code> 的容器注入丢包率 100% 的故障，只针对 IP 为 <code>10.42.0.26</code> 的 pod 生效，也就是除 <code>10.42.0.26</code> 以外的 pod 都能正常访问 <code>redis-master-68857cd57c-hknb6</code>。</p><p><strong>实验参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>destination-ip</code></td><td>string</td><td>目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。</td></tr><tr><td><code>exclude-port</code></td><td>string</td><td>排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 --local-port 或者 --remote-port 参数一起使用。</td></tr><tr><td><code>exclude-ip</code></td><td>string</td><td>排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。</td></tr><tr><td><code>interface</code></td><td>string</td><td>网卡设备，例如 eth0 (必要参数)。</td></tr><tr><td><code>local-port</code></td><td>string</td><td>本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。</td></tr><tr><td><code>percent</code></td><td>string</td><td>丢包百分比，取值在<!-- -->[0, 100]<!-- -->的正整数 (必要参数)。</td></tr><tr><td><code>remote-port</code></td><td>string</td><td>远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。</td></tr><tr><td><code>force</code></td><td></td><td>强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。</td></tr><tr><td><code>ignore-peer-port</code></td><td></td><td>针对添加 --exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。</td></tr><tr><td><code>timeout</code></td><td>string</td><td>设定运行时长，单位是秒，通用参数。</td></tr></tbody></table><p><strong>开始实验</strong></p><p><code>loss_container_network_by_id.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> loss</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> loss</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"loss container network by container id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-hknb6"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"eth0"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"100"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> timeout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"60"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> destination</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"10.42.0.26"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取 pod 名称和 container id 内容同上。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f loss_container_network_by_id.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade loss-container-network-by-id -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 获取实验 pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token assign-left variable" style="color:#36acaa">app</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">redis,role</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">master -o </span><span class="token assign-left variable" style="color:#36acaa">jsonpath</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.items</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">status.podIP</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod，IP为：10.42.0.26（被设置丢包率 100%）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-55d8c8ffbd-jd8sm </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping 实验Pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PING </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">56</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">84</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bytes of data.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 无响应</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod，该 pod 未被指定丢包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-55d8c8ffbd-22tsc </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping 实验Pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PING </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">56</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">84</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bytes of data.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bytes from </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19: </span><span class="token assign-left variable" style="color:#36acaa">icmp_seq</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">ttl</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">time</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.065</span><span class="token plain"> ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bytes from </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19: </span><span class="token assign-left variable" style="color:#36acaa">icmp_seq</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">ttl</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">time</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.051</span><span class="token plain"> ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bytes from </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.0.19: </span><span class="token assign-left variable" style="color:#36acaa">icmp_seq</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">ttl</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">time</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.078</span><span class="token plain"> ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 响应正常</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ghh7th88pmg20si06au0x.gif" alt="container 网络丢包场景" class="img_ev3q"></p><p>这里在配置中还将 <code>timeout</code> 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 <code>exclude-port</code>，该配置用来指定排除掉的丢包端口。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f loss_container_network_by_id.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade loss-container-network-by-id</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="container-域名访问异常场景">container 域名访问异常场景<a class="hash-link" href="#container-域名访问异常场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：本实验通过修改本地的 hosts，篡改域名地址映射，模拟 container 内域名访问异常场景。</p><p><strong>实验参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>domain</code></td><td>string</td><td>域名 (必要参数)</td></tr><tr><td><code>ip</code></td><td>string</td><td>映射的 ip (必要参数)</td></tr><tr><td><code>timeout</code></td><td>string</td><td>设定运行时长，单位是秒，通用参数。</td></tr></tbody></table><p><strong>开始实验</strong></p><p><code>tamper_container_dns_by_id.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tamper</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">dns</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"tamper container dns by id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> domain</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"www.baidu.com"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># pod names</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-hknb6"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># or use pod labels</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取 pod 名称和 container id 内容同上。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f tamper_container_dns_by_id.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade tamper-container-dns-by-id -o json</code> 命令，查看实验状态.</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-master-68857cd57c-hknb6 </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping www.baidu.com</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> www.baidu.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 无响应</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva2.sinaimg.cn/large/ad5fbf65gy1ghh7wcg01ng20si06ah3v.gif" alt="container 域名访问异常场景" class="img_ev3q"></p><p>可以看到 Pod 的 <code>/etc/hosts</code> 文件被修改，模拟了 dns 解析异常的场景。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="container-内进程场景">container 内进程场景<a class="hash-link" href="#container-内进程场景" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="杀-container-内指定进程">杀 container 内指定进程<a class="hash-link" href="#杀-container-内指定进程" title="Direct link to heading">​</a></h4><p>此实验会删除指定容器中的 <code>redis-server</code> 进程。</p><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>process</code></td><td>string</td><td>进程关键词，会在整个命令行中查找</td></tr><tr><td><code>process-cmd</code></td><td>string</td><td>进程命令，只会在命令中查找</td></tr><tr><td><code>count</code></td><td>string</td><td>限制杀掉进程的数量，0 表示无限制</td></tr><tr><td><code>signal</code></td><td>string</td><td>指定杀进程的信号量，默认是 9，例如 --signal 15</td></tr><tr><td><code>timeout</code></td><td>string</td><td>设定运行时长，单位是秒，通用参数</td></tr></tbody></table><p><strong>开始实验</strong></p><p><code>kill_container_process_by_id.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> kill</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> kill</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"kill container process by id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-server"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-slave-55d8c8ffbd-4pz8m"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>选择一个 pod，获取容器 ID ，修改 <code>kill_container_process_by_id.yaml</code> 中的 <code>container-ids</code> 值。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f kill_container_process_by_id.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade kill-container-process-by-id -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 开始实验前查看容器 id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.name,ID:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.containerID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">POD_NAME                        CONTAINER      ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">redis-slave-55d8c8ffbd-4pz8m   redis-master   docker://bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 实验后查看容器 id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.name,ID:.status.containerStatuses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">.containerID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">POD_NAME                       CONTAINER     ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">redis-slave-55d8c8ffbd-4pz8m   redis-slave   docker://94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ghh7y7r2nmg20r0068wxo.gif" alt="杀 container 内指定进程" class="img_ev3q"></p><p>容器 id 变化，主进程被杀掉后容器进行了重启，符合实验逾期。</p><p><code>redis-server</code> 的进程号发生改变，说明被杀掉后，又被重新拉起。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f kill_container_process_by_id.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade kill-container-process-by-id</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="挂起-container-内指定进程">挂起 container 内指定进程<a class="hash-link" href="#挂起-container-内指定进程" title="Direct link to heading">​</a></h4><p>此实验会挂起指定容器中的 <code>redis-server</code> 进程。</p><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>process</code></td><td>string</td><td>进程关键词，会在整个命令行中查找</td></tr><tr><td><code>process-cmd</code></td><td>string</td><td>进程命令，只会在命令中查找</td></tr><tr><td><code>timeout</code></td><td>string</td><td>设定运行时长，单位是秒，通用参数</td></tr></tbody></table><p><strong>开始实验</strong></p><p><code>stop_container_process_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stop</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"kill container process by id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> container</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ids</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-server"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-slave-55d8c8ffbd-4pz8m"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>选择一个节点，修改 <code>stop_container_process_by_names.yaml</code> 中的 <code>names</code> 值。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f stop_container_process_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade stop-container-process-by-names -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-55d8c8ffbd-4pz8m </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看 redis-server 进程号</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ps</span><span class="token plain"> aux</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> redis-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root      </span><span class="token number" style="color:#36acaa">5632</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">41520</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">4168</span><span class="token plain"> ?        Tl   06:28   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">:06 redis-server *:6379</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 <code>redis-server</code> 此刻进程处于暂停状态了（T）。</p><p><img loading="lazy" src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ghh8090cr1g20t406y1kx.gif" alt="挂起 container 内指定进程" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f stop_container_process_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade stop-container-process-by-names</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a class="hash-link" href="#结语" title="Direct link to heading">​</a></h2><p>仔细看过前面几篇文章的同学获取会发现，不同场景的混沌实验中的参数与操作方式有些类似。其实对于这些在不同场景，比如 Pod、Node 和 Container 中进行混沌实验的实现是一致的，都是基于 <code>blade</code> 这个 CLI 工具，只对对其在不同场景进行了不同的封装，这就涉及到了混沌工程实验规范，下篇文章我们就来谈谈<strong>混沌工程模型</strong>和<strong>混沌工程实验规范</strong>，看看混沌工程的实现应该遵循怎么样的模型和规范。</p>]]></content>
        <author>
            <name>郭旭东（@sunny0826）</name>
            <uri>https://github.com/sunny0826</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade：从零开始的混沌工程（四）]]></title>
        <id>/2020/07/22/chaosblade-start-4</id>
        <link href="https://chaosblade.io/en/blog/2020/07/22/chaosblade-start-4"/>
        <updated>2020-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>在上篇文章中，我们介绍了如何使用 <strong>ChaosBlade Operator</strong> 对 pod 资源进行混沌实验。从本章将继续对 Kubernetes Node 资源的混沌实验进行讲解，同时也配套了 <a href="https://katacoda.com/" target="_blank" rel="noopener noreferrer">katacode</a> 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade。</p><p><a href="https://chaosblade.io/" target="_blank" rel="noopener noreferrer">chaosblade.io</a> 官网已经正式上线。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实验对象node">实验对象：Node<a class="hash-link" href="#实验对象node" title="Direct link to heading">​</a></h2><p>在 Kubernetes 中，节点（Node）是执行工作的机器，以前叫做 minion。根据你的集群环境，节点可以是一个虚拟机或者物理机器。每个节点都包含用于运行 pods 的必要服务，并由主控组件管理。节点上的服务包括 容器运行时、kubelet 和 kube-proxy。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="node-实验场景">Node 实验场景<a class="hash-link" href="#node-实验场景" title="Direct link to heading">​</a></h2><p>同上篇文章，本篇默认已安装 <a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6" target="_blank" rel="noopener noreferrer">guestbook</a> 应用和 ChaosBlade Operator。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="节点资源相关场景">节点资源相关场景<a class="hash-link" href="#节点资源相关场景" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="节点-cpu-负载实验场景">节点 CPU 负载实验场景<a class="hash-link" href="#节点-cpu-负载实验场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：指定一个节点，做 CPU 负载 80% 实验。</p><p><strong>开始实验</strong></p><p><code>node_cpu_load.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> cpu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">load</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> cpu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> fullload</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"increase node cpu load by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> cpu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"80"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>选择一个节点，修改 <code>node_cpu_load.yaml</code> 中的 <code>names</code> 值。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f node_cpu_load.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade cpu-load -o json</code> 命令，查看实验状态。</p><p><strong>查看实验结果</strong></p><p>进入该 Node 节点，可以看到该节点 CPU 达到预期效果：</p><p><img loading="lazy" src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzw9xq77mg20qg06i4qp.gif" alt="节点 CPU 负载实验" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f node_cpu_load.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade cpu-load</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="节点网络相关场景">节点网络相关场景<a class="hash-link" href="#节点网络相关场景" title="Direct link to heading">​</a></h3><blockquote><p>实验前，请先登录 node 节点，使用 <code>ifconfig</code> 命令查看网卡信息，不是所有系统默认的网卡名称都是 <code>eth0</code>。</p></blockquote><h4 class="anchor anchorWithStickyNavbar_LWe7" id="节点网络延迟场景">节点网络延迟场景<a class="hash-link" href="#节点网络延迟场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：指定节点的本地 32436 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。</p><p><strong>开始实验</strong></p><p>选择一个节点，修改 <code>delay_node_network_by_names.yaml</code> 中的 <code>names</code> 值。</p><p>对 docker20 节点本地端口 32436 访问丢包率 100%。</p><p><code>delay_node_network_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay node network loss"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ens33"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> local</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"32436"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"3000"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> offset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"1000"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f delay_node_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade delay-node-network-by-names -o json</code> 命令，查看实验状态。</p><p><strong>查看实验结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 从实验节点访问 Guestbook</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> telnet </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129 </span><span class="token number" style="color:#36acaa">32436</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connected to </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Escape character is </span><span class="token string" style="color:#e3116c">'^]'</span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connection closed by foreign host.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.00s user </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.00s system </span><span class="token number" style="color:#36acaa">35</span><span class="token plain">% cpu </span><span class="token number" style="color:#36acaa">0.003</span><span class="token plain"> total</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">telnet </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129 </span><span class="token number" style="color:#36acaa">32436</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.01s user </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.00s system </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">% cpu </span><span class="token number" style="color:#36acaa">3.248</span><span class="token plain"> total</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggzwhc0n0yg20qg070dou.gif" alt="节点网络延迟场景" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f delay_node_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade delay-node-network-by-names</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="节点网络丢包场景">节点网络丢包场景<a class="hash-link" href="#节点网络丢包场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：指定节点的 <code>32436</code> 端口注入丢包率 100% 的故障。</p><p><strong>开始实验</strong></p><p>选择一个节点，修改 <code>loss_node_network_by_names.yaml</code> 中的 <code>names</code> 值。</p><p><code>loss_node_network_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> loss</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> loss</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"node network loss"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"100"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ens33"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> local</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"32436"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f loss_node_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验结果</strong></p><p>执行 <code>kubectl get blade loss-node-network-by-names -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><p>该端口为 <code>Guestbook</code> nodeport 的端口，访问实验端口无响应，但是访问未开启实验的端口可以正常使用：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 获取节点 IP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> -o wide</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME       STATUS   ROLES                      AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION       CONTAINER-RUNTIME</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker20   Ready    worker                     3d16h   v1.17.6   </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129   </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">none</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">        Ubuntu </span><span class="token number" style="color:#36acaa">18.04</span><span class="token plain">.4 LTS   </span><span class="token number" style="color:#36acaa">4.15</span><span class="token plain">.0-101-generic   docker://19.3.11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kk         Ready    controlplane,etcd,worker   4d16h   v1.17.6   </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.4.210   </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">none</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">        Ubuntu </span><span class="token number" style="color:#36acaa">18.04</span><span class="token plain">.4 LTS   </span><span class="token number" style="color:#36acaa">4.15</span><span class="token plain">.0-101-generic   docker://19.3.11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 从实验节点访问 Guestbook - 无法访问</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ telnet </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129 </span><span class="token number" style="color:#36acaa">32436</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">telnet: connect to address </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.1.129: Operation timed out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">telnet: Unable to connect to remote </span><span class="token function" style="color:#d73a49">host</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 从非实验节点访问 Guestbook - 正常访问</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ telnet </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.4.210 </span><span class="token number" style="color:#36acaa">32436</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.4.210</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connected to </span><span class="token number" style="color:#36acaa">192.168</span><span class="token plain">.4.210.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Escape character is </span><span class="token string" style="color:#e3116c">'^]'</span><span class="token builtin class-name">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva2.sinaimg.cn/large/ad5fbf65ly1ggzwjjyj67g20qg07c4az.gif" alt="节点网络丢包场景" class="img_ev3q"></p><p>同样也可以直接从浏览器访问地址，验证实验。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f loss_node_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade loss-node-network-by-names</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="节点域名访问异常场景">节点域名访问异常场景<a class="hash-link" href="#节点域名访问异常场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：本实验通过修改 Node 的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。</p><p><strong>开始实验</strong></p><p>选择一个节点，修改 <code>dns_node_network_by_names.yaml</code> 中的 <code>names</code> 值。</p><p><code>dns_node_network_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dns</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dns node network by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> domain</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"www.baidu.com"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f dns_node_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade dns-node-network-by-names -o json</code> 命令，查看实验状态。</p><p><strong>查看实验结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> kk@192.168.1.129</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping www.baidu.com</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> www.baidu.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 无响应</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzwluapg5g20qg07011a.gif" alt="节点域名访问异常场景" class="img_ev3q"></p><p>可以看到 Node 的 <code>/etc/hosts</code> 文件被修改，模拟了 dns 解析异常的场景。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f dns_node_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade dns-node-network-by-names</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="节点磁盘相关场景">节点磁盘相关场景<a class="hash-link" href="#节点磁盘相关场景" title="Direct link to heading">​</a></h3><p>kubernetes 节点磁盘场景。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="节点磁盘填充场景">节点磁盘填充场景<a class="hash-link" href="#节点磁盘填充场景" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：指定节点磁盘占用 80%</p><p><strong>开始实验</strong></p><p>选择一个节点，修改 <code>fill_node_disk_by_names.yaml</code> 中的 <code>names</code> 值。</p><p><code>fill_node_disk_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> fill</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">disk</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> disk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> fill</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"node disk fill"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"80"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f fill_node_disk_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade fill-node-disk-by-names -o json</code> 命令，查看实验状态。</p><p><strong>查看实验结果</strong></p><p>可以看到磁盘占用 80%。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> kk@192.168.1.129</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看磁盘使用率</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">df</span><span class="token plain"> -h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Filesystem      Size  Used Avail Use% Mounted on</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">udev            </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.9G     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.9G   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">% /dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmpfs           </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.6G  </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">.2M  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.6G   </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">% /run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/sda2        98G   73G   20G  </span><span class="token number" style="color:#36acaa">79</span><span class="token plain">% /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmpfs           </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.9G     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.9G   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">% /dev/shm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmpfs           </span><span class="token number" style="color:#36acaa">5</span><span class="token plain">.0M     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">5</span><span class="token plain">.0M   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">% /run/lock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmpfs           </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.9G     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.9G   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">% /sys/fs/cgroup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/loop1       90M   90M     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token plain">% /snap/core/8268</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmpfs           </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.6G     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.6G   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">% /run/user/1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/loop0       98M   98M     </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token plain">% /snap/core/9289</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggzwq8gdtrg20t406k7fr.gif" alt="节点磁盘填充场景" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f fill_node_disk_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade fill-node-disk-by-names</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="节点进程相关场景">节点进程相关场景<a class="hash-link" href="#节点进程相关场景" title="Direct link to heading">​</a></h3><p>kubernetes 节点进程相关场景。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="杀节点上指定进程">杀节点上指定进程<a class="hash-link" href="#杀节点上指定进程" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：此实验会删除指定节点上的 <code>redis-server</code> 进程。</p><p><strong>开始实验</strong></p><p>选择一个节点，修改 <code>kill_node_process_by_names.yaml</code> 中的 <code>names</code> 值。</p><p><code>kill_node_process_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> kill</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> kill</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"kill node process by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-server"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f kill_node_process_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade kill-node-process-by-names -o json</code> 命令，查看实验状态。</p><p><strong>查看实验结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> kk@192.168.1.129</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看 redis-server 进程号</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ps</span><span class="token plain"> -ef </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> redis-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root     </span><span class="token number" style="color:#36acaa">31327</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">31326</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> 06:15 ?        00:00:00 redis-server *:6379</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 可以看到进程号发生了变化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ps</span><span class="token plain"> -ef </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> redis-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root      </span><span class="token number" style="color:#36acaa">2873</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2872</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> 06:23 ?        00:00:00 redis-server *:6379</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>redis-server</code> 的进程号发生改变，说明被杀掉后，又被重新拉起。</p><p><img loading="lazy" src="https://tva1.sinaimg.cn/large/ad5fbf65ly1ggzwsx3sbig20t407a4d6.gif" alt="杀节点上指定进程" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f kill_node_process_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade kill-node-process-by-names</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="挂起节点上指定进程">挂起节点上指定进程<a class="hash-link" href="#挂起节点上指定进程" title="Direct link to heading">​</a></h4><p><strong>实验目标</strong>：此实验会挂起指定节点上的 <code>redis-server</code> 进程。</p><p><strong>开始实验</strong></p><p>选择一个节点，修改 <code>stop_node_process_by_names.yaml</code> 中的 <code>names</code> 值。</p><p><code>stop_node_process_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stop</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"kill node process by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"docker20"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"redis-server"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f stop_node_process_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade stop-node-process-by-names -o json</code> 命令，查看实验状态。</p><p><strong>查看实验结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> kk@192.168.1.129</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看 redis-server 进程号</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ps</span><span class="token plain"> aux</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> redis-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root      </span><span class="token number" style="color:#36acaa">5632</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">41520</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">4168</span><span class="token plain"> ?        Tl   06:28   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">:06 redis-server *:6379</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 <code>redis-server</code> 此刻进程处于暂停状态了（T）。</p><p><img loading="lazy" src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzwuoz52eg20t407w7m0.gif" alt="挂起节点上指定进程" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f stop_node_process_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade stop-node-process-by-names</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a class="hash-link" href="#结语" title="Direct link to heading">​</a></h2><p>本篇我们使用 ChaosBlade Operator 对 Kubernetes Node 资源进行混沌工程实验，可以看到对于 Node 节点，ChaosBlade 依旧有简单的配置及操作来完成复杂的实验，可以通过自由组合，实现各种 Node 节点级别的复杂故障，验证 Kubernetes 集群的稳定性及可用性。同时当真正的故障来临时，由于早已模拟了各种故障情况，可以快速定位故障源，做到处变不惊，轻松处理故障。</p>]]></content>
        <author>
            <name>郭旭东（@sunny0826）</name>
            <uri>https://github.com/sunny0826</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade：从零开始的混沌工程（三）]]></title>
        <id>/2020/06/15/chaosblade-start-3</id>
        <link href="https://chaosblade.io/en/blog/2020/06/15/chaosblade-start-3"/>
        <updated>2020-06-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>在上篇文章中，我们介绍了如何安装 <strong>ChaosBlade Operator</strong>，并进行了简单的使用。从本章开始，所有的实践章节，都会有配套的 <a href="https://katacoda.com/" target="_blank" rel="noopener noreferrer">katacode</a> 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实验对象pod">实验对象：Pod<a class="hash-link" href="#实验对象pod" title="Direct link to heading">​</a></h2><p>Pod 是 Kubernetes 应用程序的基本执行单元，即它是 Kubernetes 对象模型中创建或部署的最小和最简单的单元。Pod 表示在 集群 上运行的进程。</p><p>Pod 封装了应用程序容器（或者在某些情况下封装多个容器）、存储资源、唯一网络 IP 以及控制容器应该如何运行的选项。 Pod 表示部署单元：Kubernetes 中应用程序的单个实例，它可能由单个 容器 或少量紧密耦合并共享资源的容器组成。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pod-实验场景">Pod 实验场景<a class="hash-link" href="#pod-实验场景" title="Direct link to heading">​</a></h2><p>Pod 作为 Kubernetes 最基本的执行单元，对于 Kubernetes 集群来说十分重要。那么对于混沌工程，从 Pod 入手实践就再合适不过了。</p><blockquote><p>本篇默认已安装 <a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6" target="_blank" rel="noopener noreferrer">guestbook</a> 应用和 ChaosBlade Operator。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="删除-pod-场景">删除 Pod 场景<a class="hash-link" href="#删除-pod-场景" title="Direct link to heading">​</a></h3><p><strong>实验目标</strong>：删除 <code>chaosblade</code> 命名空间下标签是 <code>role=master</code> 的 pod。</p><p><strong>执行观测</strong></p><p>开始观察需要删除的 pod：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token string" style="color:#e3116c">"role=master"</span><span class="token plain"> -n chaosblade -w</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>开始实验</strong></p><p><code>delete_pod_by_labels.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delete</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">two</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pod</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">labels</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delete</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delete pod by labels"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> labels</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"role=master"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> evict</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>新建终端，并开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f delete_pod_by_labels.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行命令：<code>kubectl get blade delete-two-pod-by-labels -o json</code>，查看实验状态。</p><p><strong>查看实验结果</strong></p><p>通过上面的观测命令，可以看到 pod 被删除并重启，结果符合预期。</p><p><img loading="lazy" src="https://tva2.sinaimg.cn/large/ad5fbf65ly1gft22n0pnpg20pg06qhdt.gif" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f delete_pod_by_labels.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade delete-two-pod-by-labels</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pod-网络延迟场景">Pod 网络延迟场景<a class="hash-link" href="#pod-网络延迟场景" title="Direct link to heading">​</a></h3><p><strong>实验目标</strong>：在 chaosblade 命名空间中，对 <code>redis-master-68857cd57c-dzbs9</code> Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。</p><p><strong>开始实验</strong></p><p><code>delay_pod_network_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pod</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay pod network by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-dzbs9"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> local</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"6379"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"eth0"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"3000"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> offset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"1000"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取 Pod 名称：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token assign-left variable" style="color:#36acaa">app</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">redis,role</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">master -o </span><span class="token assign-left variable" style="color:#36acaa">jsonpath</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.items</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">metadata.name</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改 <code>delay_pod_network_by_names.yaml</code> 中的 <code>name</code> 字段的值。</p><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f delay_pod_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade delay-pod-network-by-names -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 获取实验 pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token assign-left variable" style="color:#36acaa">app</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">redis,role</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">master -o </span><span class="token assign-left variable" style="color:#36acaa">jsonpath</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.items</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">status.podIP</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-6dd975d4c8-2zrkb </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 在 pod 中安装 telnet</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> update </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -y telnet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 测试时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> telnet </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44 </span><span class="token number" style="color:#36acaa">6379</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connected to </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Escape character is </span><span class="token string" style="color:#e3116c">'^]'</span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connection closed by foreign host.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m3.790s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m0.007s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0.001s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到访问实验 pod 6379 端口的延迟为 3s 左右，结果符合预期。</p><p><img loading="lazy" src="https://tva4.sinaimg.cn/large/ad5fbf65ly1gft27x90skg20p606c1kx.gif" alt="delay-pod-network" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f delay_pod_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade delay-pod-network-by-names</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pod-网络丢包场景">Pod 网络丢包场景<a class="hash-link" href="#pod-网络丢包场景" title="Direct link to heading">​</a></h3><p><strong>实验目标</strong>：在 chaosblade 命名空间中，对 <code>redis-master-68857cd57c-dzbs9</code> Pod 注入丢包率 100% 的故障，只针对 IP 为 10.42.69.42 的 pod 生效，也就是除 10.42.69.42 以外的 pod 都能正常访问 <code>redis-master-68857cd57c-dzbs9</code>。</p><p><strong>开始实验</strong></p><p>获取 pod 名称内容同上。</p><p><code>loss_pod_network_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> loss</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pod</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> loss</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"loss pod network by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-dzbs9"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"eth0"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"100"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> timeout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"60"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> destination</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"10.42.69.42"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f loss_pod_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade loss-pod-network-by-names -o json</code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 获取实验 pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token assign-left variable" style="color:#36acaa">app</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">redis,role</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">master -o </span><span class="token assign-left variable" style="color:#36acaa">jsonpath</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.items</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">status.podIP</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod，IP为：10.42.69.42（被设置丢包率 100%）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-6dd975d4c8-lm8jz </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping 实验Pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PING </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">56</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">84</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bytes of data.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 无响应</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod，该 pod 未被指定丢包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-6dd975d4c8-2zrkb </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping 实验Pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PING </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">56</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">84</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bytes of data.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bytes from </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44: </span><span class="token assign-left variable" style="color:#36acaa">icmp_seq</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">ttl</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">63</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">time</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.128</span><span class="token plain"> ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bytes from </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44: </span><span class="token assign-left variable" style="color:#36acaa">icmp_seq</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">ttl</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">63</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">time</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.128</span><span class="token plain"> ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bytes from </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44: </span><span class="token assign-left variable" style="color:#36acaa">icmp_seq</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">ttl</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">63</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">time</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.092</span><span class="token plain"> ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 响应正常</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到观测 pod 访问实验 pod 丢包率 100%（无法访问），而其他 pod 不受影响，结果符合预期。</p><p><img loading="lazy" src="https://tvax2.sinaimg.cn/large/ad5fbf65ly1gft2c288oqg20p607i7wi.gif" alt="loss-pod-network" class="img_ev3q"></p><p>这里在配置中将 <code>timeout</code> 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 <code>exclude-port</code>，该配置指定一些端口不会丢包，以免该 pod 失联。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f loss_pod_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade loss-pod-network-by-names</code>)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pod-域名访问异常场景">Pod 域名访问异常场景<a class="hash-link" href="#pod-域名访问异常场景" title="Direct link to heading">​</a></h3><p><strong>实验目标</strong>：Pod 内访问指定域名异常。</p><p><strong>开始实验</strong></p><p>获取 pod 名称内容同上。</p><p><code>dns_pod_network_by_names.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dns</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pod</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dns pod network by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-slave-6dd975d4c8-lm8jz"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> domain</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"www.baidu.com"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"10.0.0.1"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f dns_pod_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade dns-pod-network-by-names -o json </code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-6dd975d4c8-lm8jz </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Ping www.baidu.com</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> www.baidu.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 无响应</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到访问指定域名 <code>www.baidu.com</code> 异常，结果符合预期。</p><p><img loading="lazy" src="https://tvax1.sinaimg.cn/large/ad5fbf65ly1gft2hti44bg20p607i4nj.gif" alt="dns-pod-network" class="img_ev3q"></p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f dns_pod_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade dns-pod-network-by-names</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pod-文件系统-io-故障场景">Pod 文件系统 I/O 故障场景<a class="hash-link" href="#pod-文件系统-io-故障场景" title="Direct link to heading">​</a></h3><p><strong>实验目标</strong>：给 kubernetes 的 pod 注入文件系统I/O故障。</p><blockquote><p>注意：此场景需要激活 <code>--webhook-enable</code> 参数，如需使用此功能，请在 chaosblade-operator 参数中添加 <code>--webhook-enable</code>，或者在安装时指定：例如 helm 安装时添加 <code>--set webhook.enable=true</code> 指定。</p></blockquote><p><strong>前提条件</strong></p><ul><li>集群中部署了 <code>chaosblade-admission-webhook</code></li><li>需要注入故障的 <code>volume</code> 设置 <code>mountPropagation</code> 为 <code>HostToContainer</code></li><li>pod上面添加了如下annotations:<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">chaosblade/inject-volume</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> "data" //需要注入故障的volume name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">chaosblade/inject-volume-subpath</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> "conf" //volume挂载的子目录</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><p><strong>部署测试 pod</strong></p><p>chaosblade webhook 会根据 pod 的 annotation，注入 fuse 的 sidecar 容器：</p><ol><li><code>chaosblade/inject-volume</code> 指明需要注入故障的 volume name，比如例子中的 <code>data</code>。</li><li><code>chaosblade/inject-volume-subpath</code> 指明 volume 挂载路径的子目录。上面的例子中，volume 的挂载路径是 <code>/data</code>,子目录是 <code>conf</code>，则在 pod 内，注入I/O异常的目录是 <code>/data/conf</code>。</li><li>指定需要注入故障的 volume 需要指定 <code>mountPropagation：HostToContainer</code>，这个字段的含义可以参考官方文档 <a href="https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation" target="_blank" rel="noopener noreferrer">Volumes</a>。</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 部署测试 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f io-test-pod.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看 sidecar 是否注入成功</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod test-7c9fc6fd88-7lx6b -n chaosblade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME                    READY   STATUS    RESTARTS   AGE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test-7c9fc6fd88-7lx6b   </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">/2     Running   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          4m8s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>开始实验</strong></p><p><code>pod_io.yaml</code> 内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> inject</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pod</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">labels</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> IO</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Pod IO Exception by labels"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> labels</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"app=test"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"read"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1000"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> percent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"60"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> errno</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"28"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f pod_io.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>查看实验状态</strong></p><p>执行 <code>kubectl get blade inject-pod-by-labels -o json </code> 命令，查看实验状态。</p><p><strong>观测结果</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 进入实验 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it test-7c9fc6fd88-7lx6b </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 在 pod 内读取指定目录中的文件，如果没有可以新建一个</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /data/conf/test.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat: </span><span class="token builtin class-name">read</span><span class="token plain"> error: No space left on device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m3.007s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m0.002s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0.002s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 因为有重试，显示有 3s 的延迟</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 因为设置了 60% 的异常，所有还是有成功的情况</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /data/conf/test.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">123</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m0.004s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m0.002s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0.000s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>文件读取异常，结果符合预期。</p><p><img loading="lazy" src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1gft2pqli3ug20p607i7nk.gif" alt="io-pod-read" class="img_ev3q"></p><p>在本例中，我们对 read 操作注入两种异常，异常率为百分之60:</p><ul><li>对 <code>read</code> 操作增加 1s 的延迟。</li><li>对 <code>read</code> 操作返回错误 <code>28</code>。</li></ul><p>这里只是做了一种类型的实验，更多的实验类型详见<a href="https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/blade-create-k8s/blade-create-k8s-pod-io" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f pod_io.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade inject-pod-by-labels</code></p><p>删除测试 pod：<code>kubectl delete -f io-test-pod.yaml</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a class="hash-link" href="#结语" title="Direct link to heading">​</a></h2><p>本篇我们使用 ChaosBlade Operator 对 Kubernetes Pod 资源进行混沌工程实验，可以看到 ChaosBlade 的操作简单易懂且功能强大，通过模拟不同的故障，可以检验我们系统监控报警的时效性，也可以检验我们系统在遇到故障时的情况，根据这些情况对系统进行调整，从而完善系统架构，增加可用性。</p><p>这里只是对于每种场景进行了简单的实验，而每个场景不止有一种实验方式，用户可以通过调整参数进行不同的实验。</p>]]></content>
        <author>
            <name>郭旭东（@sunny0826）</name>
            <uri>https://github.com/sunny0826</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade：从零开始的混沌工程（二）]]></title>
        <id>/2020/06/09/chaosblade-start-2</id>
        <link href="https://chaosblade.io/en/blog/2020/06/09/chaosblade-start-2"/>
        <updated>2020-06-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>在上篇文章中，我们介绍了<strong>混沌工程</strong>以及 <strong>ChaosBlade</strong>。从本篇开始，从 ChaosBlade 的安装部署，到实验的创建销毁，在实践的角度，一步步的完成各种混沌实验，深入认识和使用混沌工程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="chaosblade-operator">ChaosBlade-Operator<a class="hash-link" href="#chaosblade-operator" title="Direct link to heading">​</a></h2><p><a href="https://github.com/chaosblade-io/chaosblade-operator" target="_blank" rel="noopener noreferrer">ChaosBlade-Operator</a> 是 ChaosBlade 的 Kubernetes 平台实验场景实现。将混沌实验通过 Kubernetes 标准的 CRD 方式定义，用户可以像定义 Deployment 或 StatefulSet 那样定义 ChaosBlade 实验，只要对 <code>kubectl</code> 和 Kubernetes 对象有所了解，就可以轻松的创建、更新和删除实验场景；同时也可以通过 chaosblade cli 工具来操作实验场景。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装">安装<a class="hash-link" href="#安装" title="Direct link to heading">​</a></h3><p>ChaosBlade-Operator 需要使用 Helm 安装，进入 <a href="https://github.com/chaosblade-io/chaosblade-operator/releases" target="_blank" rel="noopener noreferrer">release 页面</a> 下载安装包（ChaosBlade 还提供了阿里云 OSS 的下载地址，提升国内下载速度）。</p><p>使用 Helm 3 安装：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 下载安装包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">wget</span><span class="token plain"> -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 为 chaosblade 创建一个 namespace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl create namespace chaosblade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 安装 ChaosBlade-Operator</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ helm </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> chaos chaosblade-operator-0.6.0.tgz --set webhook.enable</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">true --namespace</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">chaosblade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查看安装结果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -n chaosblade </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> chaosblade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-operator-6b6b484599-gdgq8   </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">/1     Running   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          4d23h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-tool-7wtph                  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">/1     Running   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          4d20h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-tool-r4zdk                  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">/1     Running   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          4d23h</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ChaosBlade-Operator 启动后将会在每个节点部署一个 <code>chaosblade-tool</code> Pod 和一个 <code>chaosblade-operator</code> Pod，如果都运行正常，则安装成功。上面设置 <code>--set webhook.enable=true</code> 是为了 Pod 文件系统 I/O 故障实验，如果不需要进行该实验，则无需添加该设置。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="快速开始">快速开始<a class="hash-link" href="#快速开始" title="Direct link to heading">​</a></h2><p>下面就以 Pod 网络延迟实验为例，展示如何使用 ChaosBlade-Operator。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实验准备">实验准备<a class="hash-link" href="#实验准备" title="Direct link to heading">​</a></h3><p>实验前需要先准备实验对象，这里使用 <a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6" target="_blank" rel="noopener noreferrer">guestbook</a> 应用。</p><p><strong>安装</strong></p><p>同样使用 Helm 3</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># add repo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">helm repo </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> apphub-incubator https://apphub.aliyuncs.com/incubator/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 安装</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">helm </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> guestbook apphub-incubator/guestbook --set service.type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">NodePort --namespace</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">chaosblade</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>默认的 Service 类型为 <code>LoadBalancer</code>，这里为了方便访问设置为了 <code>NodePort</code>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="开始实验">开始实验<a class="hash-link" href="#开始实验" title="Direct link to heading">​</a></h3><p><strong>实验目标：</strong>对 chaosblade 命名空间中，对 <code>redis-master-68857cd57c-dzbs9</code> Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。</p><p><strong>实验 yaml 配置</strong></p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chaosblade.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ChaosBlade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pod</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">by</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">experiments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">scope</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">action</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> delay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">desc</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay pod network by names"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> names</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-dzbs9"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> local</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"6379"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"eth0"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"3000"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> offset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"1000"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将其保存为 <code>delay_pod_network_by_names.yaml</code> 并执行命令，开始实验：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl apply -f delay_pod_network_by_names.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="查看实验状态">查看实验状态<a class="hash-link" href="#查看实验状态" title="Direct link to heading">​</a></h3><p>执行 <code>kubectl get blade delay-pod-network-by-names -o json</code> 命令，查看实验状态：</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"apiVersion"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"chaosblade.io/v1alpha1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"kind"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ChaosBlade"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"metadata"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"annotations"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"kubectl.kubernetes.io/last-applied-configuration"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"{\"apiVersion\":\"chaosblade.io/v1alpha1\",\"kind\":\"ChaosBlade\",\"metadata\":{\"annotations\":{},\"name\":\"delay-pod-network-by-names\"},\"spec\":{\"experiments\":[{\"action\":\"delay\",\"desc\":\"delay pod network by names\",\"matchers\":[{\"name\":\"names\",\"value\":[\"redis-master-68857cd57c-dzbs9\"]},{\"name\":\"namespace\",\"value\":[\"chaosblade\"]},{\"name\":\"local-port\",\"value\":[\"6379\"]},{\"name\":\"interface\",\"value\":[\"eth0\"]},{\"name\":\"time\",\"value\":[\"3000\"]},{\"name\":\"offset\",\"value\":[\"1000\"]}],\"scope\":\"pod\",\"target\":\"network\"}]}}\n"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"creationTimestamp"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2020-06-02T05:57:50Z"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"finalizers"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"finalizer.chaosblade.io"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"generation"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay-pod-network-by-names"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"resourceVersion"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"7710394"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"selfLink"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/apis/chaosblade.io/v1alpha1/chaosblades/delay-pod-network-by-names"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"uid"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1235ff55-8256-4caa-a371-e1abf6c9e7b7"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"spec"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"experiments"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"action"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"desc"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay pod network by names"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"matchers"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"names"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token string" style="color:#e3116c">"redis-master-68857cd57c-dzbs9"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"namespace"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token string" style="color:#e3116c">"chaosblade"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"local-port"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token string" style="color:#e3116c">"6379"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"interface"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token string" style="color:#e3116c">"eth0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"time"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token string" style="color:#e3116c">"3000"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"offset"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token string" style="color:#e3116c">"1000"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"scope"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pod"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"target"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"network"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"status"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"expStatuses"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"action"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"delay"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"resStatuses"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"a86f8cf8b68ace98"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"kind"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pod"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"redis-master"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"nodeName"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"keking"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"state"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Success"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"success"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token property" style="color:#36acaa">"uid"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"scope"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pod"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"state"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Success"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"success"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token property" style="color:#36acaa">"target"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"network"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"phase"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Running"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到实验成功创建了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="观测结果">观测结果<a class="hash-link" href="#观测结果" title="Direct link to heading">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 获取实验 pod ip</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get pod -l </span><span class="token assign-left variable" style="color:#36acaa">app</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">redis,role</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">master -o </span><span class="token assign-left variable" style="color:#36acaa">jsonpath</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.items</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">status.podIP</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 进入观测 pod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl </span><span class="token builtin class-name">exec</span><span class="token plain"> -it redis-slave-6dd975d4c8-2zrkb </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 在 pod 中安装 telnet</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> update </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -y telnet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 测试时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> telnet </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44 </span><span class="token number" style="color:#36acaa">6379</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connected to </span><span class="token number" style="color:#36acaa">10.42</span><span class="token plain">.69.44.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Escape character is </span><span class="token string" style="color:#e3116c">'^]'</span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connection closed by foreign host.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m3.790s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m0.007s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0.001s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm2deqtdwg20p606c1kx.gif" class="img_ev3q"></p><p>可以看到结果符合预期。</p><p><strong>停止实验</strong></p><p>执行命令：<code>kubectl delete -f delay_pod_network_by_names.yaml</code></p><p>或者直接删除 blade 资源：<code>kubectl delete blade delay-pod-network-by-names</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a class="hash-link" href="#结语" title="Direct link to heading">​</a></h2><p>本篇我们讲解了如何部署 ChaosBlade-Operator 并进行了简单的实验，可以看到在云原生场景下，ChaosBlade 依旧有着简单的操作方式，多种实验场景，并对混沌实验模型进行了标准化实现。很友好的将混沌实验模型与 Kubernetes 声明式设计结合在一起，依靠混沌实验模型便捷开发场景的同时，又可以很好的结合 Kubernetes 设计理念。</p>]]></content>
        <author>
            <name>郭旭东（@sunny0826）</name>
            <uri>https://github.com/sunny0826</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade：从零开始的混沌工程（一）]]></title>
        <id>/2020/06/04/chaosblade-start-1</id>
        <link href="https://chaosblade.io/en/blog/2020/06/04/chaosblade-start-1"/>
        <updated>2020-06-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>随着微服务的盛行以及容器技术的普及，借助 Kubernetes 的容器编排能力，部署一套分布式系统的难度也越来越低。但随之而来的是越来越复杂的系统，以及越来越难的系统可靠性测试，有时仅仅是一个接口的故障，就可能导致整个系统的雪崩。在雪崩中，找到那个最初故障的接口也十分困难，因为到处都在报错。</p><p>为了解决这些问题，除了不断减少服务的耦合，建立强大的监控系统以及设置熔断、限流等策略等方式，这时<strong>混沌工程</strong>就出现了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是混沌工程">什么是混沌工程<a class="hash-link" href="#什么是混沌工程" title="Direct link to heading">​</a></h2><p>根据<a href="https://principlesofchaos.org" target="_blank" rel="noopener noreferrer">混沌工程原则（PRINCIPLES OF CHAOS ENGINEERING）</a>：<strong>混沌工程是在分布式系统上进行实验的学科, 目的是建立对系统抵御生产环境中失控条件的能力以及信心。</strong></p><p>大规模分布式软件系统的发展正在改变软件工程。作为一个行业，我们很快就采用了提高开发灵活性和部署速度的实践。但伴随着这些优点，一个迫切问题出现了，那就是：我们对投入生产的复杂系统有多少信心？</p><p>即使分布式系统中的所有单个服务都正常运行, 但这些服务之间的交互也会导致不可预知的结果。这些不可预知的结果, 由影响生产环境的罕见且具有破坏性的事件复合而成，令这些分布式系统存在内在的混沌。</p><p>需要在异常行为出现之前，在整个系统内找出这些弱点。这些弱点包括以下形式:</p><ul><li>当服务不可用时的不正确回滚设置</li><li>不当的超时设置导致的重试风暴</li><li>由于下游依赖的流量过载导致的服务中断</li><li>单点故障时的级联失败等</li></ul><p>在这些弱点通过生产环境暴露给用户之前，必须主动的发现这些重要的弱点。并需要一种方法来管理这些系统固有的混沌, 通过增加的灵活性和速率以提升我们对生产环境部署的信心, 尽管系统的复杂性是由这些部署所导致的。</p><p>采用基于经验和系统的方法解决了分布式系统在规模增长时引发的问题, 并以此建立对系统抵御这些事件的能力和信心。通过在受控实验中观察分布式系统的行为来了解它的特性，我们称之为<strong>混沌工程</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="chaosblade">ChaosBlade<a class="hash-link" href="#chaosblade" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gfh7pe8dxnj21d407mgly.jpg" class="img_ev3q"></p><p><a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">ChaosBlade</a> 中文名混沌之刃，是阿里巴巴开源的一款遵循混沌工程原理和混沌实验模型的实验注入工具，是内部项目 MonkeyKing 对外开源的项目，其建立在阿里巴巴近十年故障测试和演练实践基础上，结合了集团各业务的最佳创意和实践。旨在帮助企业提升分布式系统的容错能力，并且在企业上云或往云原生系统迁移过程中业务连续性提供保障。</p><p>目前支持的场景有：<code>基础资源</code>、<code>Java 应用</code>、<code>C++ 应用</code>、<code>Docker 容器</code>以及 <code>Kubernetes 平台</code>。该项目将场景按领域实现封装成单独的项目，不仅可以使领域内场景标准化实现，而且非常方便场景水平和垂直扩展，通过遵循混沌实验模型，实现 chaosblade cli 统一调用。</p><p>该项目体验极好，仅需一个可执行文件 <code>blade</code>，就可完成多种场景的实验（一些复杂场景如 Java 应用实验，则需要相关工具包），同时如果不想下载 chaosblade 工具包，快速体验 chaosblade，可以拉取 docker 镜像并运行，在容器内体验。</p><p><img loading="lazy" src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gfh7yajpkkg212i0mqu0y.gif" class="img_ev3q"></p><center>快速体验</center><p>该项目于 2020 年 5 月 27 日发布了最新了 <a href="https://github.com/chaosblade-io/chaosblade/releases/tag/v0.6.0" target="_blank" rel="noopener noreferrer">v0.6.0</a> 版本，本系列文章的全部实践也将基于这个版本以及该版本的修复版本 v0.6.x 进行。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="chaosblade-operator">ChaosBlade-Operator<a class="hash-link" href="#chaosblade-operator" title="Direct link to heading">​</a></h2><p>ChaosBlade-Operator 是 ChaosBlade 的 Kubernetes 平台实验场景实现，也是本系列文章主要使用的工具。其将混沌实验通过 Kubernetes 标准的 CRD 方式定义，很方便的使用 Kubernetes 资源操作的方式来创建、更新、删除实验场景，包括使用 kubectl、client-go 等方式执行，而且还可以使用上述的 chaosblade cli 工具执行。</p><p><img loading="lazy" src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1gfh84jo6dgg20p606c1kx.gif" class="img_ev3q"></p><center>Pod 网络延迟场景</center><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a class="hash-link" href="#结语" title="Direct link to heading">​</a></h2><p>本篇为系列文章开篇，主要介绍混动工程以及混沌工程实验工具 ChaosBlade，后续会从实践的角度带领读者上手实践混沌工程，了解混沌工程的方法及原理。实践出真知，在后续的文章后，我们将从 ChaosBlade-Operator 的安装部署、实验配置、实验观测及实验销毁等方面，详细介绍 ChaosBlade 的功能。同时也会介绍在不同场景下混沌工程是如何帮助开发者发现系统中的问题，并达到逐渐建设高可用的韧性系统的目的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a class="hash-link" href="#参考" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/wizardbyron/principlesofchaos_zh-cn" target="_blank" rel="noopener noreferrer">混沌工程原则</a> - Principlesofchaos.org</li><li><a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">ChaosBlade</a> - Github.com</li></ul>]]></content>
        <author>
            <name>郭旭东（@sunny0826）</name>
            <uri>https://github.com/sunny0826</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChaosBlade：云原生架构下的混沌工程探索和实践]]></title>
        <id>/2019/10/17/chaosblade-cloud-native</id>
        <link href="https://chaosblade.io/en/blog/2019/10/17/chaosblade-cloud-native"/>
        <updated>2019-10-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程在云原生架构下的落地与实践]]></summary>
        <content type="html"><![CDATA[<blockquote><p>导读：随着云原生概念的兴起，越来越多的系统服务在往云原生演进，在演进阶段如何保障系统的稳定性和高可用性，是每个系统负责人都要关注的问题，通过混沌工程可以很好的解决这个问题。ChaosBlade 是阿里巴巴开源的一款混沌工程实验执行工具，其易用性和丰富的场景受到大家的广泛关注。本文整理自阿里巴巴技术专家肖长军（穹谷）在 QCon 全球软件开发大会（上海站）2019 上的演讲，他围绕云原生架构介绍了 ChaosBlade 的设计、特性与实践，以及如何基于 ChaosBlade 搭建一个自动化的混沌实验平台。</p><p><img loading="lazy" src="/en/assets/images/qcon-meeting-on-site-6ebdb75c8e1577898456668ad2f87584.jpeg" width="1600" height="1067" class="img_ev3q"></p></blockquote><p>大家好，欢迎大家来听混沌专场，我是来自阿里巴巴的肖长军，花名穹谷，之前对外分享过什么是混沌工程以及如何实施混沌工程。云原生和混沌工程在今年都是比较火的概念，混沌工程在阿里巴巴实施也近十年的时间，我今天主要围绕 ChaosBlade 分享，ChaosBlade 是阿里巴巴在 2019 年 4 月份开源的一款混沌工程的实验工具，我今天的讲的内容包含这三点：一是 ChaosBlade 是什么，ChaosBlade 的定位及它的特性有哪些，然后再重点会介绍 ChaosBlade 的详细设计；接下来会介绍 ChaosBlade 在云原生架构下具体的设计，以及使用案例；最后再分享一下基于 ChaosBlade 搭建的，在阿里云上输出的混沌实验平台 AHAS Chaos，一个简单易用的故障演练平台。接下来我们先来看一下混沌工程在阿里巴巴内部的演进。</p><p><img loading="lazy" src="/en/assets/images/alibaba-chaos-engineering-roadmap-5484b108f026cb0bf5fecb501f9127cd.png" width="1088" height="612" class="img_ev3q"></p><p>在 12 年阿里内部就上线了 EOS 项目，用于梳理分布式服务强弱依赖问题，同年进行了同城容灾的断网演练。15 年实现异地多活，16 年内部推出故障演练平台 MonkeyKing，开始在线上环境实施混沌实验，然后是 18 年，这一年输出了两个产品，一个是阿里云内部专有云，就专门对专有云，阿里的一些产品做高可用测试的 ACP，还有对外将阿里云，在阿里的高可用架构经验输出的一个 AHAS 应用高可用服务产品，该产品包含架构感知，能自动感知你的架构拓扑，系统拓扑；还有限流降级功能，就是应用防护这一块；另外一个就是故障演练，也就是 AHAS-Chaos 平台，后面也会重点介绍。2019 年 4 月份刚才也提到开源了 ChaosBlade，然后下半年我们开始做专有云的混沌实验平台的一个输出。我们为什么要做开源呢？因为当时已经开源的工具存在以下问题。</p><p><img loading="lazy" src="/en/assets/images/chaosblade-opensource-background-03292dd50de10e4687dfe16c608da5c0.png" width="1088" height="611" class="img_ev3q"></p><p>例如场景能力分散，大家熟知的 Chaos Monkey，混沌猴子，只杀 EC2 实例；Kube Monkey 只杀 K8s pod。除了能力分散之外，还有上手难度大，因为不同的工具它的使用方式也不一样。还有缺少实验模型，难以实践，并且场景难以沉淀。这些问题就会导致很难实现平台化，你很难通过一个平台去囊括这些工具。我们当时提出了一套混沌实验模型，很好的解决了这些问题，ChaosBlade 也是基于混沌实验模型来研发的，而且混沌工程在阿里已实践多年，所以我们将沉淀的场景开源出来，服务于混沌工程社区。</p><p><img loading="lazy" src="/en/assets/images/chaosblade-core-strengths-633dcff5ec67c62be128129846f2f898.png" width="1089" height="613" class="img_ev3q"></p><p>ChaosBlade 是一款遵循混沌实验模型的混沌实验执行工具，具有场景丰富度高，简单易用等特点，而且扩展场景也特别方便，开源不久就被加入到 CNCF Landspace 中，成为主流的一款混沌工具。ChaosBlade 这些特点得益于以下这个混沌实验模型。</p><p><img loading="lazy" src="/en/assets/images/chaosblade-experiment-model-be0dd835cf05a9716d81d19f024213cb.png" width="1092" height="614" class="img_ev3q"></p><p>此模型很简洁，这个倒三角模型供分为四层：第一个是 Target，我们演练的目标是什么；然后是 Scope，定义了我们实验范围；其次是 Matcher，我们实验场景触发匹配的规则有哪些；最后一个是 Action，我们执行的实验行为，也就是我们要做什么演练。举个例子，比如我们要对一台机器上的 double 应用调用 serviceA 服务做调用延迟实验。那么我们来对齐一下实验模型，首先 Target 就是 double，我们要对 double 服务做演练。Scope 是本机，就是这一台机器上 double 应用。然后匹配规则是服务名 serviceA，那么它的 action 是什么？是延迟，通过实验模型描述之后，层次清晰，而且该模型覆盖目前所有的实验场景。我们再来看一下基于混沌实验模型 ChaosBlade 目前所具备的场景。</p><p><img loading="lazy" src="/en/assets/images/experiment-of-chaosblade-284520f4b9ac5be15d6058f5ad6d076c.png" width="1087" height="610" class="img_ev3q"></p><p>我把 ChaosBlade 的场景分为四大类，前面这一列绿色字体是项目工程，后面的绿色字体代表已经实现的组件，后面的绿框框起来的白字的，就是它所支持的实验场景举例。第一大类场景是基础资源，包含的实验场景如 CPU 满载、内存占用，网络延迟，进程 Hang 等。另外一类是应用服务，应用服务的场景取决于你应用的构建语言，我们目前支持的是 JAVA、C++ 和 NodeJS，每一个应用服务下面又细分了这些组件，后面列举的这些绿色字体的是我们已经支持的组件。再一类场景涉及到容器服务，容器服务的话，我们目前支持 Docker 和 K8s。我们支持的 K8s 场景例如杀 Pod，Kubelet 异常，删容器等。最后的一类是云平台，待实现中。这个是 ChaosBlade 故障场景大图。在这丰富的场景下，ChaosBlade 的易用性也非常强。
<img loading="lazy" src="/en/assets/images/chaosblade-cli-e263b907fd844a461ad45c0c2b5d52a1.png" width="1087" height="608" class="img_ev3q"></p><p>重点介绍一下，ChaosBlade 是个直接下载解压就可以使用的工具，不需要安装，然后它支持的调用方式包含 CLI 方式，直接执行 blade 命令，比如这里举的做网络延迟的例子，你添加 -h 参数就可以看到非常完善的命令提示，比如我要一个 9520 端口调用做网络丢包，对齐前面的实验模型，我们就可以看到，它的演练目标是 network，它的 action 是丢包，它的 matcher 就是调用远程的一个服务端口 9520。执行成功后会返回实验结果，每一个实验场景我们都会作为一个对象，它会返回一个实验对象的 UID，此 UID 用于后续的实验管理，比如销毁、查询实验都是通过此 UID 来做的。要销毁实验，也就是恢复实验，直接执行 blade destroy 命令就可以了。ChaosBlade 另一种调用方式是 Web 方式，通过执行 server 命令对外暴露 HTTP 服务，那么在上层，你如果自己构建混沌实验平台的话，你直接可以通过 HTTP 请求去调用就可以了。所以说 ChaosBlade 具有很好的易用性，那么它是如何设计的呢？</p><p><img loading="lazy" src="/en/assets/images/chaosblade-overall-design-1b73e1ffd6af6516717fae7a0861ae41.png" width="1090" height="613" class="img_ev3q"></p><p>我将 ChaosBlade 的设计总结为这六点。使用 Golang 构建，实现跨平台，并且解压即用；工具使用采用 CLI 的方式，使用简单，具备完善的命令提示；遵循混沌实验模型定义场景接口，所有场景基于此接口实现，将模型转换为 cobra 框架所支持的命令参数，实现变量参数化、参数规范化，并且通过实验模型 Yaml 描述，可以很方便的实现多语言、多领域的场景扩展。而且将整个实验对象化，每个实验对象都会有个 UID，方便管理。这个是 ChaosBlade 的一个整体设计。那么我们再通过一个例子来看一下 ChaosBlade 如何使用。</p><p><img loading="lazy" src="/en/assets/images/practice-case-of-chaosblade-c5737ee62b0005c9290afabca017257f.png" width="1087" height="611" class="img_ev3q"></p><p>这个例子的是主要验证服务调用数据库延迟。在讲这个例子之前，先看一下右上角 demo 的应用拓扑图，这个拓扑图来自于 AHAS 架构感知，从这个拓扑图中我们可以看出 consumer 服务调用 provider，provider 调用 mk-demo RDS 数据库，同时也调用下游的 base 服务，这个是三层的微服务调用。这里我们 provider 服务有两个实例，所做的实验就是 provider 调用数据库 mk-demo 发生延迟。在执行混沌实验之前，就要有明确的监控指标，因为执行混沌实验的步骤包含要执行的实验计划是什么，我们执行的预期是什么，然后执行实验，我们执行实验如果不符合预期，我们的下一步的推进计划是什么，后面再做持续的验证，所以说我们这里定义了一个监控指标，我们监控慢 SQL 数以及监控报警。那么我们的期望假设就是慢 SQL 数增加，钉钉群收到相关的报警信息。我们执行的实验是对其中一个 provider 服务实例注入调用 mk-demo 数据库延迟的故障，大家可以看到左下角，这个就是对 demo 数据库注入延迟的命令，可以看出命令非常简洁清晰，比如很明确的表达出我们的实验目标是 mysql，我们的实验场景是做延迟，后面这些都是这些数据库的匹配器，比如表，查询类型，还有控制实验的影响条数等等。ChaosBlade 可以很有效的控制实验的爆炸半径，可以控制到影响的条数，控制影响百分比，而且还有各种匹配器来匹配，控制粒度很细。那么我执行完这条命令，就开始对这台机器的 provider 服务注入故障，大家可以看到我注入故障之后，这里这个图就是我立刻收到了钉钉的报警，那么这个 case 是符合预期的 case，但是即使符合预期的 case，也是有价值的，需要相关的开发和运维人员是要去排查延迟的问题根因并恢复。这里的监控告警使用的是阿里云的 ARMS 产品，除了监控告警功能，还可以抓取到详细的链路调用堆栈，这里很清晰的展示出哪条 SQL 语句执行慢。这个是整个的一个 ChaosBlade 使用案例，它可以验证系统的告警是否有效，开发和运维的响应速度是否达到要求，那么除了刚才提到的告警和开发和人员响应速度之外，混沌实验的价值我总结为三部分。</p><p><img loading="lazy" src="/en/assets/images/value-of-chaos-engineering-3dbcc2880cb3384cf7b28015199c0d54.png" width="1089" height="610" class="img_ev3q"></p><p>第一部分就是人员，人员的话这里列举了四个角色，比如对于架构师来说，那么架构师他要做系统设计，比如设计高容错的系统或者是面向失败的系统，那么可以通过混沌工程去验证系统的韧性和容错容灾的能力。对于开发和运维来说，通过混沌工程，可以提高故障的应急效率，或完善排查问题的工具。对于测试来说的话，之前的测试涉及到从功能测试、性能测试，这些都是从用户的角度去来测试系统的。那么通过混沌工程可以从系统的角度来验证系统中潜在的问题，可以提早暴露线上的问题，然后降低故障的复发率。对于产品和设计来说，他们可以通过混沌工程来演练页面上的一些事件，比如商品详情页，哪项出现问题，用户体验度如何。所以说混沌工程是适用于每一个人的。另一部分是系统，系统的话，前面也提到了可以通过混沌工程提升系统的容错、容灾能力。还有就是基础能力和运维高可用，就是通过混沌工程去验证你的基础服务，比如你的监控体系，你的告警体系，是不是高可用的，如果这些不是高可用的，那么当故障出现的时候，你有可能不能及时发现系统的故障，不能及时收到故障报警，排查问题也有可能遇到阻碍，所以说你要保证你的基础设施是高可用的，它可以通过混沌工程去验证你这些基础服务。最后一个是流程，就通过混沌工程，你可以验证整个故障发生的处理流程，比如阿里的话，故障都有明确的等级划分，通过混沌工程可以推进故障等级的划分，验证你的联系人的有效性，比如经过多年有可能这些人都离职了，但是他还在告警联系人里，该在的而不在，这都是问题。这是在流程方面，除了故障应急还有一个故障管理，故障管理的话主要是做故障沉淀，后面的话故障统计以及故障复盘，以及故障场景沉淀，持续做演练，防止故障再次发生。这里是对混沌工程价值的一个总结，除了这些，在云原生时代，混沌工程的价值是什么？</p><p><img loading="lazy" src="/en/assets/images/what-is-value-of-chaos-engineering-in-cloud-native-a48e0c947ab8f59edfab468187b0d958.png" width="1089" height="612" class="img_ev3q"></p><p>我们在讲价值之前先看一下目前云原生架构所包含的技术及相关的稳定性挑战。以下列举了云原生相关的技术。</p><p><img loading="lazy" src="/en/assets/images/cloud-native-challenge-8fd8fc2c364b31ff42b40449ff2ca188.png" width="1086" height="609" class="img_ev3q"></p><p>云设施指公有云、专有云和混合云等，是云原生系统的基础设施，基础实施的故障可能对整个上层业务系统造成很大影响，所以说云设施的稳定性是非常重要的。容器服务的挑战可以分两大类，一类是面向 k8s 服务提供商，服务是否稳定，另一类是面向用户，配置的扩缩容规则是否有效，实现的 CRD 是否正确，容器编排是否合理等问题。微服务，分布式服务的复杂性，单个服务的故障很难判断对整个系统的影响；service mesh，sidecar 的服务路由、负载均衡等功能的有效性，还有 sidecar 容器本身的可用性。serverless，现在基本上都是函数加事件的形式，资源调度是否有效，而且 serverless 服务提供商屏蔽了一些中间件，你能掌控的是函数这些服务，那么你可以通过混沌工程去验证你函数调用的一些配置，比如超时配置，还有相关的一些降级策略，这些是否合理。以上这些云原生架构稳定性相关的挑战，再来看云原生本身的的特点，谈到云原生，可以说云原生是一个理念，包含我这里列举的云原生相关的技术，但是他们都有相同的共性，比如弹性可扩展、松耦合、容错性高、还有一些易于管理，便于观察这些特性。所以说在云原生时代，混沌工程对云原生系统的价值我总结为。</p><p><img loading="lazy" src="/en/assets/images/cloud-native-for-chaos-engineering-6bf783890f49177e31459296e01e624b.png" width="1087" height="608" class="img_ev3q"></p><p>云原生时代下，通过混沌工程能推进系统”云原生“化.这句话的意思就是能让你的系统通过混沌工程能达到云原生的极致，就是刚才提到的那些特点，具有非常高的容错能力，具有非常高的弹性。这是我对混沌工程在云原生架构下价值的总结。</p><p>我们再来看一下 ChaosBlade 在云原生架构下场景的实现方案。</p><p><img loading="lazy" src="/en/assets/images/cloud-native-for-chaos-engineering-6bf783890f49177e31459296e01e624b.png" width="1087" height="608" class="img_ev3q"></p><p>ChaosBlade 通过 Operator 创建了自定义控制，通过 Helm 等方式可一键安装，用来管理实验资源对象，大家可以看到左边这些声明式的实验场景配置，它也是严格遵循前面的混沌实验模型，配置非常的方便。这里举个例子，比如我对集群中的节点做负载实验，负载 50%，那么我就可以定义好这个资源，通过 kubectl 去执行。也可以使用 chaosblade 自身的 blade 命令去执行。ChaosBlade Operator 除了定义控制器之外，会以 daemonset 的方式在每个节点上部署一个 chaosblade-tool pod 来执行混沌实验。不同的实验场景内部实现方式不同，比如 Node 实验场景，其上面部署的 chaosblade-tool 内部执行即可，而 Container 内的实验场景，控制器会将 chaosblade 包拷贝到目标 Container 中执行。技术实现核心的话就是将混沌实验定义为 K8s 资源，传递给 operater 来识别并执行资源。这个是 ChaosBlade 的一个整体的实验方案。ChaosBlade 非常友好的支持 K8s 实验场景，目前包含 Node、Pod、Container 资源场景。我们来看具体的一个案例。</p><p><img loading="lazy" src="/en/assets/images/chaosblade-accomplish-for-cloud-native-ad22c3652b9d66767c929be040054313.png" width="1087" height="611" class="img_ev3q"></p><p>这个例子是随机删除业务 Pod，然后验证业务的稳定性，右边是对实验场景 yaml 描述，这里的 case 是随机筛选实例进行删除，每一个服务只杀一台实例，通过 system=demo 标签随机的筛选这些服务实例，然后指定删除的每个服务 Pod 实例数量。可以看到我这边的监控指标是业务指标，就是下方的页面截图，另一个是 Pod 数。这里的期望假设是业务不受影响，Pod 的副本数在预期之内。这是一个实验假设。我们来看实验的结果。我执行完实验之后，我通过查询 Pod 来验证，然后大家可以看到每一类服务，它会被删掉一个 Pod 实例，然后会被 K8s 重新拉起。但是删不是我们的目的，混沌工程有一点非常重要，就是我们做故障演练的目的不是触发故障，我们目的是通过故障来验证系统的架构的缺陷，发现问题并迭代修复这些缺陷，来提高系统的韧性。所以说我们这边要去验证这个结果。这边是拿 K8s 官方的一个 guestbook 这个 demo 去做的演示，那么我执行完这个实验之后，大家可以看下方截图，整个实验的前后的页面展示是不一样的，之前提交的数据不存在了。那么这个 demo 就存在数据持久化高可用的问题。我后面分析了一下，它为什么会造成这个问题，因为如果删除掉 master 之后，它没有做数据持久化存储，你前面提交的这些数据就会丢失。它会把数据同步到 slave 节点，由于没有数据，它会覆盖掉原有保存的这些数据。所以说大家通过这个 case 可以看到，随机杀 Pod 去可以验证你整个的业务的稳定性和容错能力，这个 case 是不符合我们预期的，所以说我们后面要去推动业务，去修复，去完善这个问题。前面是对 ChaosBlade 的整体介绍，包括什么是 ChaosBlade，ChaosBlade 的易用性，ChaosBlade 支持哪些场景，ChaosBlade 的架构设计，还有拿具体的案例去讲混沌工程的价值，然后包括 ChaosBlade 在面向云原生的系统，我们该如何去做。接下来我们讲一下混沌实验平台。为什么要做平台？因为前面也提到了混沌实验执行步骤，你执行混沌工程，很重要的一点是要做持续化验证，如果只是工具的话，那么你很难去做自动化的持续验证，所以说你需要使用平台。这里重点介绍一下阿里云 AHAS 这个云产品下面的 AHAS Chaos 故障演练平台。会先介绍平台的设计理念，然后拿一个案例去讲该如何去使用。</p><p><img loading="lazy" src="/en/assets/images/ahas-chaos-design-concept-90b6db742d70caa44b477a92b15a1362.png" width="1089" height="612" class="img_ev3q"></p><p>我们先来看一下 AHAS Chaos 平台设计理念。AHAS Chaos 具有开放性，它可以集成和被集成，它可以通过小程序来拓展，可以集成别的服务，比如你可以调用第三方监控，或者你自身的服务来做一些事前的准备，或者是做一些结果验证，这是它的集成能力。它的被集成就是它提供一些 OpenAPI，你可以基于这些 OpenAPI 去查询、创建、执行混沌实验，而且你可以基于它去做一些自己业务相关的一些处理。这个是被集成。操作简洁，它把整个的前面提到的混沌实验执行的步骤，它分成了四个阶段。第一个阶段就是准备阶段，比如我可以做一些事情的准备，还有执行阶段，就是执行实验。检查阶段就是做验证，还有恢复阶段。所以说操作是非常简洁。而且前面提到的那些实验场景，会有很多参数，那么你要通过 ChaosBlade 的话，你要查这个命令帮助才能看到这些实验参数是什么，平台的话它会自动解析出这个参数来展示，并有详细的说明，你只需要下拉框选择或自己填就可以了，它的操作非常简洁。编排灵活，它具有拖拽的一些编排能力。还有专家经验，就是我们把一些我们内部的，或者是云上的一些高考用的经验，会通过引演练模板的形式给提供给大家，大家可以套用这个模板来进行相关的实验。这个是 AHAS Chaos 平台设计理念。我们再来看一下 AHAS Chaos 平台的架构设计。</p><p><img loading="lazy" src="/en/assets/images/chaos-architecture-design-24daea6ba6bf178bbc7a4360a41ed350.png" width="1087" height="611" class="img_ev3q"></p><p>这个是 AHAS Chaos 平台架构图，你可以部署在阿里云的 ACK 或自建的 K8s 集群，以及 ECS 或非 ECS。基于 AHAS 底座运行，前面也提到了，AHAS Chaos 有小程序的能力，你可以自定义扩展，它底层集成了 ChaosBlade，具有 ChaosBlade 这些丰富的场景。在往上平台模块，前面也提到了它的演练管理，演练运行，还有演练空间、演练计划、演练报表等，这些平台都是提供功能。然后它的开放式的能力，它开放 openAPI，你可以基于这个平台去构建自己的平台，比如这里提到的阿里巴巴目前的演练，第一个日常演练，就是你可以做一些服务的日常演练，那么你也可以做突袭，所谓突袭的话就是在不通知业务方的情况下，去对他们的系统注入故障，来验证他们故障的告警、故障的响应速度、故障的恢复能力，这是突袭演练。攻防演练的话就是大家商量好，一起来做一个攻防对抗。这是攻防演练。还有资损演练、上云演练等。这是 AHAS Chaos 平台的架构设计。下面我们通过一个 case 来分享平台的使用。</p><p><img loading="lazy" src="/en/assets/images/ahas-chaos-usecase-a2ae8719bd7ae541985461eaa1b09077.png" width="1089" height="611" class="img_ev3q"></p><p>面向于原生架构的一个 AHAS Chaos 平台使用的例子，右下角的话是宠物商店的 Demo，右上方是这个 Demo 的架构拓扑图，是基于 AHAS 产品架构感知的能力，此产品一键安装，安装完之后，不需要做任何事情，它就会自动感知出整个系统应用的架构拓扑图，还有非常详细的进程、网络、机器、容器等信息。所以说这边的话，我通过 AHAS 架构感知去做一个数据库延迟实验，验证 Pod 的水平扩容能力。Demo 运行在阿里云 ACK 上，对 provider Pod 数据库做网络延迟实验，然后去验证预期。发生了网络延迟，一个具备容错能力的系统，它会水平扩展新的 Pod。因为数据库延迟之后，RT 会升高，RT 升高之后就会影响用户，那么一个容错的一个韧性比较好的系统，它会水平扩展 Pod，来降低这个延迟的负载，把原有 Pod 隔离或者是删除掉。所以监控指标就是 RT 和 Pod 数，我期望的假设是 RT 会短暂的升高，但是很快会恢复。左下角是 AHAS Chaos 平台页面，大家可以看到，通过平台可以把这些参数暴露出来，你只需要去做简单的配置就可以了，无需去写 Yaml 文件。平台还提供了演练编排和演练计划，你只需要保存这个实验，点击立即运行，就可以方便的去执行实验，你可以结合架构感知验证 Pod 容器的变化。这是对 AHAS Chaos 故障演练平台的介绍。</p><p><img loading="lazy" src="/en/assets/images/chaosblade-Summarize-83d8a409e0db64fd8f905eeb5dde3ede.png" width="1088" height="612" class="img_ev3q"></p><p>右上方的图片是 ChaosBlade 的开源讨论群和应用高可用服务（AHAS）的交流群，这两个都是钉钉群。ChaosBlade 的一些技术文档也都会在群里分享，关于 AHAS 的问题可以在群里咨询。</p><p>以上是我对今天分享的总结。基于实验模型实现的 ChaosBlade 不仅场景丰富，而且使用简单，很友好的支持云原生场景。如果企业想去试用或者是落地混沌工程的话，AHAS Chaos 是个不错的选择。</p><p>以上就是我这次的分享，谢谢大家。</p>]]></content>
        <author>
            <name>肖长军（穹谷，@xcaspar）</name>
            <uri>https://github.com/xcaspar</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chaosblade, 阿里一个超级牛逼的混沌实验实施工具]]></title>
        <id>/2019/07/03/chaosblade-chaos-engineering-tools</id>
        <link href="https://chaosblade.io/en/blog/2019/07/03/chaosblade-chaos-engineering-tools"/>
        <updated>2019-07-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[转自：https://juejin.cn/post/6844903879814053901]]></summary>
        <content type="html"><![CDATA[<blockquote><p>转自：<a href="https://juejin.cn/post/6844903879814053901" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903879814053901</a>
来源：稀土掘金</p></blockquote><h1>Chaosblade是什么？</h1><p>Chaosblade是遵循混沌工程（Chaos Engineering）原理的实验工具，用于模拟常见的故障场景，帮助提升分布式系统的可恢复性和对故障的容错性。
Chaosblade是建立在阿里巴巴近十年故障测试和演练实践基础上，结合了集团各业务的最佳创意和实践。
目前支持的演练场景有操作系统类的 CPU、磁盘、进程、网络，Java 应用类的 Dubbo、MySQL、Servlet 和自定义类方法延迟或抛异常等以及杀容器、杀 Pod，具体可执行 blade create -h 查看。
好了，上面的介绍是从Chaosblade的github主页抄的。
github主页地址：<a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">chaosblade-github</a>
说白了，Chaosblade是一个故障模拟工具，可以模拟比如服务器CPU满了、磁盘满了、网络慢、Dubbo某个服务响应时间长、jvm中某个方法抛出异常、调用Mysql慢等等。所以这个工具对于大公司来说是非常非常有用的，因为可以提前模拟出各种各样的故障，从而保证系统的高可用与稳定。</p><h1>Chaosblade怎么用？</h1><p>用法非常简单，分为两步：</p><ol><li>下载压缩包并解压：github.com/chaosblade-…</li><li>解压之后的文件中有一个blade的可执行文件，这就是Chaosblade提供的客户端工具，我们主要使用这个工具来进行故障模拟。</li></ol><p>关于blade的各种参数详解，大家还是去github主页上去看吧，这里不介绍了，我主要想给大家看一下故障模拟的具体使用以及效果。
接下来会介绍Chaosblade六个使用场景：</p><ul><li>模拟服务器CPU爆满</li><li>模拟服务器磁盘爆满</li><li>模拟调用某个Dubbo服务超时</li><li>模拟JVM中某个方法抛出异常或者修改方法返回值</li><li>模拟调用Mysql超时或出现异常</li><li>模拟服务器网络缓慢</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景一服务器cpu爆满">场景一：服务器CPU爆满<a class="hash-link" href="#场景一服务器cpu爆满" title="Direct link to heading">​</a></h2><p>故障演练前系统的cpu状态，直接使用 <code>top -o CPU</code> 命令查看：</p><p><img loading="lazy" src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/3/16bb7fde31ca7131~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="top" class="img_ev3q">
进行故障演练：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade create cpu fullload</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"a0682a98d0d7d900"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>命令执行后返回成功则证明故障演练成功，再查看<code>top -o CPU</code> 命令：
<img loading="lazy" src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/3/16bb7fde32271a1d~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="top" class="img_ev3q">
我们通过结果可以看出来Chaosblade应该就是让自己去占满cpu从而使服务器的cpu爆满。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景二服务器磁盘爆满">场景二：服务器磁盘爆满<a class="hash-link" href="#场景二服务器磁盘爆满" title="Direct link to heading">​</a></h2><p>如果要模拟磁盘爆满，实际上只需要在某个文件夹中去生成一个很大的文件就行了，所以我们这里创建一个/bladedisk文件夹。
进行故障演练前，/bladedisk文件夹的大小为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ du -sh /bladedisk/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  0B    /bladedisk/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>进行故障演练，执行一下命令：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./blade create disk fill -d --mount-point /bladedisk --size 1024</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>正常情况下会在/bladedisk文件夹下创建一个chaos_filldisk.log.dat文件。此文件的大小为1024个字节。
我这里为什么说正常情况下，因为我用的是Max OX系统，在执行上面的命令时会报错。具体的错误已提交github issues，感兴趣的同学可以关注一下，issue地址。</p><blockquote><p>小花絮：在提交issue时，我用的中文，但是被chaosblade-bot自动翻译为了英文，很厉害。</p></blockquote><p>那么大家可以在自己的系统中试试，这个issue解决后，我会对文章进行更新后补充。大家这里只需要知道Chaosblade可以模拟这种场景以及对应的原理就行了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景三调用某个dubbo服务超时">场景三：调用某个Dubbo服务超时<a class="hash-link" href="#场景三调用某个dubbo服务超时" title="Direct link to heading">​</a></h2><p>官网的Demo中给我们提供了：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fchaosblade.oss-cn-hangzhou.aliyuncs.com%2Fdemo%2Fdubbo-provider-1.0-SNAPSHOT.jar" target="_blank" rel="noopener noreferrer">dubbo-provider</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fchaosblade.oss-cn-hangzhou.aliyuncs.com%2Fdemo%2Fdubbo-consumer-1.0-SNAPSHOT.jar" target="_blank" rel="noopener noreferrer">dubbo-consumer</a></li></ul><p>大家把上面的服务提供者和服务消费者jar包下载下来之后，进到下载目录，然后通过下面命令运行起来：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 启动 dubbo-provider</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nohup java -Djava.net.preferIPv4Stack=true -Dproject.name=dubbo-provider -jar dubbo-provider-1.0-SNAPSHOT.jar &gt; provider.nohup.log 2&gt;&amp;1 &amp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 稍等 2 秒，然后启动 dubbo-consumer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nohup java -Dserver.port=8080 -Djava.net.preferIPv4Stack=true -Dproject.name=dubbo-consumer -jar dubbo-consumer-1.0-SNAPSHOT.jar &gt; consumer.nohup.log 2&gt;&amp;1 &amp;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>nohup是linux中的命令，可以让java命令后台运行。</p></blockquote><p>运行起来后，可以通过下面的命令来进行服务调用：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">http://localhost:8080/hello?msg=world</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>正常情况下，该请求会很快的完成并返回：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"date": "Wed Jul 03 16:33:10 CST 2019",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"msg": "Dubbo Service: Hello world"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>进行故障演练：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade prepare jvm --process dubbo.consumer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"5cdbc31f46a3d621"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade create dubbo delay --time 3000 --service com.alibaba.demo.HelloService --methodname hello --consumer --process dubbo.consumer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"3e705e8babe8a86c"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的命令会使consumer在调用com.alibaba.demo.HelloService服务的hello方法时增加3秒的延时。当我们访问上面访问的路径时会比之前等待的更久一点。
在对dubbo进行故障演练时，其实支持的细分场景很多，因为在dubbo中分为consumer和provider两种角色，当consumer在调用provider时，我们现在想使这个请求增加延时，我们既可以在provider端针对指定的服务增加延时，也可以在consumer调用时针对指定的服务进行延时，所以我们可以稍微看下上面的命令，它其实是在consumer进行控制的，命令也是支持在provider端进行控制的，我们运行一下以下命令：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">blade create dubbo delay --help</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将看到帮助中有下面的信息：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Flags:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --appname string          The consumer or provider application name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --consumer                To tag consumer role experiment.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --effect-count string     The count of chaos experiment in effect</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --effect-percent string   The percent of chaos experiment in effect</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -h, --help                    help for delay</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --methodname string       The method name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --offset string           delay offset for the time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --process string          Application process name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --provider                To tag provider experiment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --service string          The service interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --time string             delay time (required)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --timeout string          set timeout for experiment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --version string          the service version</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中就有<code>--consumer</code> 和<code>--provider</code> ，表示的就是命令中可以控制服务调用的两端。所以如果我们想控制provider端，想让某个接口被调用时超时的话，是完全可以进行故障演练的。
那么关于底层原理的话，需要大家对Dubbo比较了解，Dubbo中是有动态配置功能的，所以Chaosblade应该也是利用了dubbo的动态配置功能。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景四jvm中某个方法抛出异常或者修改方法返回值">场景四：JVM中某个方法抛出异常或者修改方法返回值<a class="hash-link" href="#场景四jvm中某个方法抛出异常或者修改方法返回值" title="Direct link to heading">​</a></h2><p>Chaosblade支持直接操作jvm中的方法，使它抛出异常或修改其返回值。
先准备一个MockJvm类：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package com;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.concurrent.TimeUnit;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MockJvm {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String test() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return "test...";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        MockJvm testJVM = new MockJvm();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (true) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(testJVM.test());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(e.getMessage());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            TimeUnit.SECONDS.sleep(3);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个类会每隔三秒调用一下test方法，并打印出方法的返回值，并且在捕获test方法所抛出的异常进行打印，test方法默认返回"test"。我们运行这个类，让这个类一直在运行状态，正常运行时，控制台会打印如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="方法抛出异常">方法抛出异常<a class="hash-link" href="#方法抛出异常" title="Direct link to heading">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade prepare jvm --process MockJvm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"5ff98509d2334906"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade create jvm throwCustomException --process MockJvm --classname com.MockJvm --methodname test --exception java.lang.Exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"f9052478db2f7ffc"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的命令模拟了MockJvm进程下的com.MockJvm类中的test方法会抛出java.lang.Exception异常。一旦这个命令执行成功，那么我们上面一直在运行的代码控制台将抛出异常：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-mock-exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-mock-exception</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用以下命令可以撤回刚刚的场景模拟：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./blade destroy f9052478db2f7ffc // f9052478db2f7ffc。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>撤回之后，控制台将恢复正常的打印：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-mock-exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-mock-exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-mock-exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chaosblade-mock-exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修改方法的返回值">修改方法的返回值<a class="hash-link" href="#修改方法的返回值" title="Direct link to heading">​</a></h3><p>使用以下命令可以修改方法的返回值：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade create jvm return --process MockJvm --classname com.MockJvm --methodname test --value hahaha...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"9ffce12b1fdc2580"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>控制台将打印出：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hahaha...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hahaha...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hahaha...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到成功修改了test方法的返回值。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景五调用mysql超时或出现异常">场景五：调用Mysql超时或出现异常<a class="hash-link" href="#场景五调用mysql超时或出现异常" title="Direct link to heading">​</a></h2><p>Chaosblade目前支持Mysql场景分为调用Mysql超时或者执行语句时出现异常。但是它是在JDBC这一层进行控制的，并没有真正的去控制mysql服务端。
这里先用JDBC写一个测试类：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package com;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.sql.Connection;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.sql.DriverManager;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.sql.ResultSet;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.sql.Statement;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.time.LocalDateTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.concurrent.TimeUnit;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class JDBCConnection {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static String url_encrypt="jdbc:mysql://127.0.0.1:3306/test?useSSL=false";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static String user="root";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static String password="Nice89163";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws Exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Class.forName("com.mysql.jdbc.Driver");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Connection conn  = DriverManager.getConnection(url_encrypt,user,password);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Statement stmt= conn.createStatement();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (true) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                LocalDateTime before = LocalDateTime.now();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ResultSet rs = stmt.executeQuery("select * from t_test");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                LocalDateTime after = LocalDateTime.now();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println("执行时间：" + (after.getSecond() - before.getSecond()));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(e.getMessage());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            TimeUnit.SECONDS.sleep(3);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个JDBCConnection类直接使用JDBC来执行sql，依赖mysql-connector-java对应的jar。这里我在测试的时候发现，如果使用<a href="mailto:mysql-connector-java@5.1.47" target="_blank" rel="noopener noreferrer">mysql-connector-java@5.1.47</a>这个版本可以正常的进行故障模拟，如果使用<a href="mailto:mysql-connector-java@8.0.15" target="_blank" rel="noopener noreferrer">mysql-connector-java@8.0.15</a>版本则不能进行正常的故障模拟，具体原因还没有去查。
这个测试的功能是去进行select查询，并且如果在select的时候如果抛出异常会被捕获并且进行打印，并且还会计算select语句执行所花费的时间。
首先将上面的类运行起来，控制台将一直打印如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="调用mysql抛出异常">调用Mysql抛出异常<a class="hash-link" href="#调用mysql抛出异常" title="Direct link to heading">​</a></h3><p>运行下面的命令开始故障模拟：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade prepare jvm --process JDBCConnection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"f278e66ddb1b4e11"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade create mysql throwCustomException --database test --host 127.0.0.1 --port 3306 --process JDBCConnection --sqltype select --table t_test --exception java.lang.Exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"ddd6799da50f9201"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>命令执行成功后，控制台将打印出异常：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unexpected exception encountered during query.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unexpected exception encountered during query.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用以下命令可以撤回刚刚的场景模拟：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./blade destroy ddd6799da50f9201 </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>撤回之后，控制台将恢复正常的打印：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Unexpected exception encountered during query.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unexpected exception encountered during query.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unexpected exception encountered during query.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="调用mysql增加延迟">调用Mysql增加延迟<a class="hash-link" href="#调用mysql增加延迟" title="Direct link to heading">​</a></h3><p>直接使用以下命令将使得在执行select时增加4秒的延时，注意都是在JDBC层控制的。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./blade create mysql delay --database test --host 127.0.0.1 --port 3306 --process JDBCConnection --sqltype select --table t_test --time 4000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"code":200,"success":true,"result":"8e5b35e76098caab"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>命令执行完成后，控制台将打印出：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">执行时间：4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景六服务器网络缓慢">场景六：服务器网络缓慢<a class="hash-link" href="#场景六服务器网络缓慢" title="Direct link to heading">​</a></h2><p>Chaosblade也可以对网络进行控制，比如运行下面命令可以限制经过eth0网卡的网络都会延迟3秒：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./blade create network delay --interface eth0 --time 3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>不过Mac系统还不支持这个场景，因为它实际是利用的linux系统下的tc(Traffic Control)命令，所以要模拟的话就要使用linux系统，这里我就不去模拟了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="Direct link to heading">​</a></h2><p>本来，我是打算写一篇关于Chaosblade完整使用的文章的，但是目前看来它还不是很完善，所以这次就写到这里，我要去github上面提issue去了。
但是，我相信通过这篇文章，大家应该对Chaosblade的作用和功能都有所了解了，你们有收获就是我的目的。</p>]]></content>
        <author>
            <name>1点25</name>
            <uri>https://juejin.cn/user/4353721774901806</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
</feed>